Assign the string "abcde" to a variable named "my_string".Lowercase the given string "my_string".Assign the distinct characters of the string to a variable named "chars".Sort these characters in alphabetical order.Print the resulting list of characters.
Assign the string "abcdecadeCADE" to a variable named "my_string".Lowercase the given string "my_string".Assign the distinct characters of the string to a variable named "chars".Sort these characters in alphabetical order.Print the resulting list of characters.
Assign the string "aaaaAAAAaaaa" to a variable named "my_string".Lowercase the given string "my_string".Assign the distinct characters of the string to a variable named "chars".Sort these characters in alphabetical order.Print the resulting list of characters.
Assign the string "Jerry jERRY JeRRRY" to a variable named "my_string".Lowercase the given string "my_string".Assign the distinct characters of the string to a variable named "chars".Sort these characters in alphabetical order.Print the resulting list of characters.
Assign the string "ddddc" to a variable named "my_string".Lowercase the given string "my_string".Assign the distinct characters of the string to a variable named "chars".Sort these characters in alphabetical order.Print the resulting list of characters.
Define a list of integers named "numbers" with the values [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].Calculate the sum of the elements in variable "numbers" and store the result to variable "total".Divide each element of the list by the total and multiply by 100, store the result to variable "normalized".Convert each element in variable "normalized" into a formatted string with single decimal point and store the result into "formatted".Print the variable "formatted".
Define a list of integers named "numbers" with the values [56, 97, 19, 57, 69].Calculate the sum of the elements in variable "numbers" and store the result to variable "total".Divide each element of the list by the total and multiply by 100, store the result to variable "normalized".Convert each element in variable "normalized" into a formatted string with single decimal point and store the result into "formatted".Print the variable "formatted".
Define a list of integers named "numbers" with the values [].Calculate the sum of the elements in variable "numbers" and store the result to variable "total".Divide each element of the list by the total and multiply by 100, store the result to variable "normalized".Convert each element in variable "normalized" into a formatted string with single decimal point and store the result into "formatted".Print the variable "formatted".
Define a list of integers named "numbers" with the values [1].Calculate the sum of the elements in variable "numbers" and store the result to variable "total".Divide each element of the list by the total and multiply by 100, store the result to variable "normalized".Convert each element in variable "normalized" into a formatted string with single decimal point and store the result into "formatted".Print the variable "formatted".
Define a list of integers named "numbers" with the values [10000, 1].Calculate the sum of the elements in variable "numbers" and store the result to variable "total".Divide each element of the list by the total and multiply by 100, store the result to variable "normalized".Convert each element in variable "normalized" into a formatted string with single decimal point and store the result into "formatted".Print the variable "formatted".
Write a function that takes an integer minutes and converts it to seconds.Write a function that takes an integer hours and converts it to seconds.Print the total seconds of 2 hours and 13 minutes.
Write a function that takes an integer minutes and converts it to seconds.Write a function that takes an integer hours and converts it to seconds.Print the total seconds of 1 hours and 2 minutes.
Write a function that takes an integer minutes and converts it to seconds.Write a function that takes an integer hours and converts it to seconds.Print the total seconds of 32 hours and 32 minutes.
Write a function that takes an integer minutes and converts it to seconds.Write a function that takes an integer hours and converts it to seconds.Print the total seconds of 0 hours and 32 minutes.
Write a function that takes an integer minutes and converts it to seconds.Write a function that takes an integer hours and converts it to seconds.Print the total seconds of 1 hours and 1 minutes.
Implement a function which returns the n-th Fibonacci number.Implement a function that computes the square of an integer argument.Print out the square of 1-th Fibonacci number.
Implement a function which returns the n-th Fibonacci number.Implement a function that computes the square of an integer argument.Print out the square of 2-th Fibonacci number.
Implement a function which returns the n-th Fibonacci number.Implement a function that computes the square of an integer argument.Print out the square of 3-th Fibonacci number.
Implement a function which returns the n-th Fibonacci number.Implement a function that computes the square of an integer argument.Print out the square of 4-th Fibonacci number.
Implement a function which returns the n-th Fibonacci number.Implement a function that computes the square of an integer argument.Print out the square of 10-th Fibonacci number.
Assign the list of numbers "[1,2,3,4]" to a variable named "my_numbers".Count the number of negative numbers in the list as "n_neg".Count the number of positive numbers in the list as "n_pos".Print out the larger number of those two.
Assign the list of numbers "[-1,2,3,4]" to a variable named "my_numbers".Count the number of negative numbers in the list as "n_neg".Count the number of positive numbers in the list as "n_pos".Print out the larger number of those two.
Assign the list of numbers "[-1,-2,-3,-4]" to a variable named "my_numbers".Count the number of negative numbers in the list as "n_neg".Count the number of positive numbers in the list as "n_pos".Print out the larger number of those two.
Assign the list of numbers "[-1000000, 1, 2]" to a variable named "my_numbers".Count the number of negative numbers in the list as "n_neg".Count the number of positive numbers in the list as "n_pos".Print out the larger number of those two.
Assign the list of numbers "[-1, 0.2, 0.3, 0.4]" to a variable named "my_numbers".Count the number of negative numbers in the list as "n_neg".Count the number of positive numbers in the list as "n_pos".Print out the larger number of those two.
Import the pandas library.Create a dataframe with a column labeled "Yes" with values [50, 21] and a column named "No" with values [131, 2].Compute the mean per column and store the value in a variable named means.Print the variable means.
Import the pandas library.Create a dataframe with a column labeled "Yes" with values [-10, 10] and a column named "No" with values [-20, 20].Compute the mean per column and store the value in a variable named means.Print the variable means.
Import the pandas library.Create a dataframe with a column labeled "Yes" with values [1, 2] and a column named "No" with values [3, 4].Compute the mean per column and store the value in a variable named means.Print the variable means.
Import the pandas library.Create a dataframe with a column labeled "Yes" with values [-1, -2] and a column named "No" with values [-3, -4].Compute the mean per column and store the value in a variable named means.Print the variable means.
Import the pandas library.Create a dataframe with a column labeled "Yes" with values [-10, -20] and a column named "No" with values [-30, -40].Compute the mean per column and store the value in a variable named means.Print the variable means.
Write a function that returns a number, for numbers multiple of 3 print "fizz" instead of a number, for numbers multiple of 5 print "buzz", for numbers which are multiples of both 3 and 5 "fizzbuzz".Create a list of integers ranging from 0 to 4.Call the written function for each element in the list and store the result as "new_list".Print out the list "new_list".
Write a function that returns a number, for numbers multiple of 5 print "fizz" instead of a number, for numbers multiple of 3 print "buzz", for numbers which are multiples of both 5 and 3 "fizzbuzz".Create a list of integers ranging from 0 to 9.Call the written function for each element in the list and store the result as "new_list".Print out the list "new_list".
Write a function that returns a number, for numbers multiple of 9 print "fizz" instead of a number, for numbers multiple of 3 print "buzz", for numbers which are multiples of both 9 and 3 "fizzbuzz".Create a list of integers ranging from 0 to 2.Call the written function for each element in the list and store the result as "new_list".Print out the list "new_list".
Write a function that returns a number, for numbers multiple of 2 print "fizz" instead of a number, for numbers multiple of 4 print "buzz", for numbers which are multiples of both 2 and 4 "fizzbuzz".Create a list of integers ranging from 0 to 7.Call the written function for each element in the list and store the result as "new_list".Print out the list "new_list".
Write a function that returns a number, for numbers multiple of 2 print "fizz" instead of a number, for numbers multiple of 4 print "buzz", for numbers which are multiples of both 2 and 4 "fizzbuzz".Create a list of integers ranging from 4 to 7.Call the written function for each element in the list and store the result as "new_list".Print out the list "new_list".
Write a function that can take a string and return a list of word bigrams as pairs.Assign the string "Have free hours and love children? Drive kids to school, soccer practice and other activities." to a variable named sentence.Print out the bi-grams for the variable named sentence.
Write a function that can take a string and return a list of word bigrams as pairs.Assign the string "Hello World Foo Bar" to a variable named sentence.Print out the bi-grams for the variable named sentence.
Write a function that can take a string and return a list of word bigrams as pairs.Assign the string "AA BB CC" to a variable named sentence.Print out the bi-grams for the variable named sentence.
Write a function that can take a string and return a list of word bigrams as pairs.Assign the string "abc de" to a variable named sentence.Print out the bi-grams for the variable named sentence.
Write a function that can take a string and return a list of word bigrams as pairs.Assign the string "AB CD EF" to a variable named sentence.Print out the bi-grams for the variable named sentence.
Assign the names ["Kevin", "John", "Mike", "Mitch"] as keys and corresponding notes [[3, 5, 4], [3, 1, 1], [1, 2, 3], [0, 4, 4]] as values to a dictionary named "my_notes".Create a function that takes a dictionary of objects like {{ "name": "John", "notes": [3, 5, 4] }} and returns a dictionary of objects like {{ "name": "John", "top_note": 5 }}.For each name in the dictionary get the top_note and store the pairs of names and top_notes as "my_list".Find the name with the highest top_note and assign it to "top_name".Print the variable top_name.
Assign the names ["Kevin", "John", "Mike", "Mitch"] as keys and corresponding notes [[0], [1], [2], [3]] as values to a dictionary named "my_notes".Create a function that takes a dictionary of objects like {{ "name": "John", "notes": [3, 5, 4] }} and returns a dictionary of objects like {{ "name": "John", "top_note": 5 }}.For each name in the dictionary get the top_note and store the pairs of names and top_notes as "my_list".Find the name with the highest top_note and assign it to "top_name".Print the variable top_name.
Assign the names ["Kevin", "John", "Mike", "Mitch"] as keys and corresponding notes [[0, 7], [1, 9], [2, 7], [3, 6]] as values to a dictionary named "my_notes".Create a function that takes a dictionary of objects like {{ "name": "John", "notes": [3, 5, 4] }} and returns a dictionary of objects like {{ "name": "John", "top_note": 5 }}.For each name in the dictionary get the top_note and store the pairs of names and top_notes as "my_list".Find the name with the highest top_note and assign it to "top_name".Print the variable top_name.
Assign the names ["Kevin", "John", "Mike", "Mitch"] as keys and corresponding notes [[-1], [-1], [1], [-1]] as values to a dictionary named "my_notes".Create a function that takes a dictionary of objects like {{ "name": "John", "notes": [3, 5, 4] }} and returns a dictionary of objects like {{ "name": "John", "top_note": 5 }}.For each name in the dictionary get the top_note and store the pairs of names and top_notes as "my_list".Find the name with the highest top_note and assign it to "top_name".Print the variable top_name.
Assign the names ["Kevin", "John", "Mike", "Mitch"] as keys and corresponding notes [[0], [10000], [1000], [9999]] as values to a dictionary named "my_notes".Create a function that takes a dictionary of objects like {{ "name": "John", "notes": [3, 5, 4] }} and returns a dictionary of objects like {{ "name": "John", "top_note": 5 }}.For each name in the dictionary get the top_note and store the pairs of names and top_notes as "my_list".Find the name with the highest top_note and assign it to "top_name".Print the variable top_name.
Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = "11111111".Create a function that will take the output of the above function and return the HEX number. E.g., to_hex("11111111") = 0xFF.Assign the value 0xFF to a variable named "my_hex".Convert the variable "my_hex" into the binary equivalent as string named "my_binary".Convert "my_binary" back to a HEX number named "result".Print the result.
Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = "11111111".Create a function that will take the output of the above function and return the HEX number. E.g., to_hex("11111111") = 0xFF.Assign the value 0xAA to a variable named "my_hex".Convert the variable "my_hex" into the binary equivalent as string named "my_binary".Convert "my_binary" back to a HEX number named "result".Print the result.
Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = "11111111".Create a function that will take the output of the above function and return the HEX number. E.g., to_hex("11111111") = 0xFF.Assign the value 0xAF to a variable named "my_hex".Convert the variable "my_hex" into the binary equivalent as string named "my_binary".Convert "my_binary" back to a HEX number named "result".Print the result.
Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = "11111111".Create a function that will take the output of the above function and return the HEX number. E.g., to_hex("11111111") = 0xFF.Assign the value 0x12 to a variable named "my_hex".Convert the variable "my_hex" into the binary equivalent as string named "my_binary".Convert "my_binary" back to a HEX number named "result".Print the result.
Create a function that will take a HEX number and returns the binary equivalent (as a string). E.g., to_binary(0xFF) = "11111111".Create a function that will take the output of the above function and return the HEX number. E.g., to_hex("11111111") = 0xFF.Assign the value 0xAA to a variable named "my_hex".Convert the variable "my_hex" into the binary equivalent as string named "my_binary".Convert "my_binary" back to a HEX number named "result".Print the result.
Assign the keys ["a", "b"] and values [1, 2] to a dictionary named "my_dict".Write a function "invert" that inverts the keys and values of a dictionary. E.g., invert({{ "z": "q", "w": "f" }}) = {{ "q": "z", "f": "w" }}.Write a function "is_inverted" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.Create a new variable "my_dict2" and initialize it with  "my_dict".Print a boolean value indicating if "my_dict2" is the inverted dictionary of "my_dict".
Assign the keys ["a", "b"] and values [1, 2] to a dictionary named "my_dict".Write a function "invert" that inverts the keys and values of a dictionary. E.g., invert({{ "z": "q", "w": "f" }}) = {{ "q": "z", "f": "w" }}.Write a function "is_inverted" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.Create a new variable "my_dict2" and initialize it with inverted "my_dict".Print a boolean value indicating if "my_dict2" is the inverted dictionary of "my_dict".
Assign the keys ["a", "b", "c"] and values [1, 2, -1] to a dictionary named "my_dict".Write a function "invert" that inverts the keys and values of a dictionary. E.g., invert({{ "z": "q", "w": "f" }}) = {{ "q": "z", "f": "w" }}.Write a function "is_inverted" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.Create a new variable "my_dict2" and initialize it with  "my_dict".Print a boolean value indicating if "my_dict2" is the inverted dictionary of "my_dict".
Assign the keys ["a", "b", "c"] and values [1, 2, -1] to a dictionary named "my_dict".Write a function "invert" that inverts the keys and values of a dictionary. E.g., invert({{ "z": "q", "w": "f" }}) = {{ "q": "z", "f": "w" }}.Write a function "is_inverted" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.Create a new variable "my_dict2" and initialize it with inverted "my_dict".Print a boolean value indicating if "my_dict2" is the inverted dictionary of "my_dict".
Assign the keys ["1"] and values [1] to a dictionary named "my_dict".Write a function "invert" that inverts the keys and values of a dictionary. E.g., invert({{ "z": "q", "w": "f" }}) = {{ "q": "z", "f": "w" }}.Write a function "is_inverted" that takes two dicts as arguments and returns a boolean which indicates if the second dict is an inversion of the first dict argument.Create a new variable "my_dict2" and initialize it with  "my_dict".Print a boolean value indicating if "my_dict2" is the inverted dictionary of "my_dict".
Defines class named "Player" that takes the following four arguments for a particular football player: name, age, height, weight.Also, create three functions for the class that returns the following strings: (1) get_age() returns "{{name}} is age {{age}}", (2) get_height() returns "{{name}} is {{height}} cm", (3) get_weight() returns "{{name}} weighs {{weight}} kg".Create an object named "player" with name "David Jones", age 25, height 175, weight 75.Call the getter for the age of the player and print the result.
Defines class named "Player" that takes the following four arguments for a particular football player: name, age, height, weight.Also, create three functions for the class that returns the following strings: (1) get_age() returns "{{name}} is age {{age}}", (2) get_height() returns "{{name}} is {{height}} cm", (3) get_weight() returns "{{name}} weighs {{weight}} kg".Create an object named "player" with name "Paul Smith", age 50, height 160, weight 60.Call the getter for the weight of the player and print the result.
Defines class named "Player" that takes the following four arguments for a particular football player: name, age, height, weight.Also, create three functions for the class that returns the following strings: (1) get_age() returns "{{name}} is age {{age}}", (2) get_height() returns "{{name}} is {{height}} cm", (3) get_weight() returns "{{name}} weighs {{weight}} kg".Create an object named "player" with name "Paul Smith", age 50, height 160, weight 60.Call the getter for the height of the player and print the result.
Defines class named "Player" that takes the following four arguments for a particular football player: name, age, height, weight.Also, create three functions for the class that returns the following strings: (1) get_age() returns "{{name}} is age {{age}}", (2) get_height() returns "{{name}} is {{height}} cm", (3) get_weight() returns "{{name}} weighs {{weight}} kg".Create an object named "player" with name "Herr Schmidth Gold", age 50, height 210, weight 60.Call the getter for the height of the player and print the result.
Defines class named "Player" that takes the following four arguments for a particular football player: name, age, height, weight.Also, create three functions for the class that returns the following strings: (1) get_age() returns "{{name}} is age {{age}}", (2) get_height() returns "{{name}} is {{height}} cm", (3) get_weight() returns "{{name}} weighs {{weight}} kg".Create an object named "player" with name "Paul Smith", age 5, height 160, weight 60.Call the getter for the age of the player and print the result.
Create a function "num_len" that takes a number num and returns its length. E.g., number_length(5000) = 4.Initialize a last "my_list" with the values [1, 2, 3, 12]Print the longest number in this list.
Create a function "num_len" that takes a number num and returns its length. E.g., number_length(5000) = 4.Initialize a last "my_list" with the values [-123, 2, 3, 12]Print the longest number in this list.
Create a function "num_len" that takes a number num and returns its length. E.g., number_length(5000) = 4.Initialize a last "my_list" with the values [1]Print the longest number in this list.
Create a function "num_len" that takes a number num and returns its length. E.g., number_length(5000) = 4.Initialize a last "my_list" with the values [-12, 1]Print the longest number in this list.
Create a function "num_len" that takes a number num and returns its length. E.g., number_length(5000) = 4.Initialize a last "my_list" with the values [1, 22, 333, 4444, -55555]Print the longest number in this list.
Import the class LinearRegression from sklearn.Import math.Assign integers ranging from 0 to 10 (inclusive) to "x".Define a function "f" that multiplies a input argument by 2.Create a numpy array of numbers "y" by applying f to each element of x.Initialize a linear regression model.Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).Predict a variable "x_hat" at x=[[1]] using the fitted model.Apply ceil() to the predicted value and print it as an integer.
Import the class LinearRegression from sklearn.Import math.Assign integers ranging from 0 to 10 (inclusive) to "x".Define a function "f" that multiplies a input argument by 2.Create a numpy array of numbers "y" by applying f to each element of x.Initialize a linear regression model.Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).Predict a variable "x_hat" at x=[[2]] using the fitted model.Apply ceil() to the predicted value and print it as an integer.
Import the class LinearRegression from sklearn.Import math.Assign integers ranging from 0 to 10 (inclusive) to "x".Define a function "f" that multiplies a input argument by 2.Create a numpy array of numbers "y" by applying f to each element of x.Initialize a linear regression model.Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).Predict a variable "x_hat" at x=[[3]] using the fitted model.Apply ceil() to the predicted value and print it as an integer.
Import the class LinearRegression from sklearn.Import math.Assign integers ranging from 0 to 10 (inclusive) to "x".Define a function "f" that multiplies a input argument by 2.Create a numpy array of numbers "y" by applying f to each element of x.Initialize a linear regression model.Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).Predict a variable "x_hat" at x=[[4]] using the fitted model.Apply ceil() to the predicted value and print it as an integer.
Import the class LinearRegression from sklearn.Import math.Assign integers ranging from 0 to 10 (inclusive) to "x".Define a function "f" that multiplies a input argument by 2.Create a numpy array of numbers "y" by applying f to each element of x.Initialize a linear regression model.Fit the model to input x and output y (reshape both arguments with reshape(-1, 1)).Predict a variable "x_hat" at x=[[5]] using the fitted model.Apply ceil() to the predicted value and print it as an integer.
Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'.Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.Assign "hi" to a variable named "original_text".Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'.Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'restored_text'.Create a list named "my_result" containing restored_text and encrypted_text as elements.Print the list.
Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'.Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.Assign "asdfghjkl" to a variable named "original_text".Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'.Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'restored_text'.Create a list named "my_result" containing restored_text and encrypted_text as elements.Print the list.
Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'.Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.Assign "gf" to a variable named "original_text".Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'.Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'restored_text'.Create a list named "my_result" containing restored_text and encrypted_text as elements.Print the list.
Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'.Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.Assign "Hello World" to a variable named "original_text".Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'.Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'restored_text'.Create a list named "my_result" containing restored_text and encrypted_text as elements.Print the list.
Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. For example: encrypt('hi') returns 'jk', encrypt('asdfghjkl') returns 'cufhijlmn', encrypt('gf') returns 'ih'.Create a function decrypt that decodes the encrypted string from encrypt() back into the original text.Assign "This is a LONG string for our encryption algOrithm." to a variable named "original_text".Call the function encrypt with original_text as argument and assign the result to a variable named 'encrypted_text'.Call the function decrypt with encrypted_text as argument and assign the result to a variable named 'restored_text'.Create a list named "my_result" containing restored_text and encrypted_text as elements.Print the list.
Defines a class "Person" which takes name and id as constructor arguments.Extend the class with a function __hash__ which uses the id property as hash value.Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.Create a list "persons" with instances of Person and names "Person A", "Person B", "Person C" and ids 1, 2, 2.Create a set "unique_persons" of this list.Print the number of elements in the set.
Defines a class "Person" which takes name and id as constructor arguments.Extend the class with a function __hash__ which uses the name property as hash value.Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.Create a list "persons" with instances of Person and names "Person A", "Person B", "Person C" and ids 1, 2, 2.Create a set "unique_persons" of this list.Print the number of elements in the set.
Defines a class "Person" which takes name and id as constructor arguments.Extend the class with a function __hash__ which uses the id property as hash value.Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.Create a list "persons" with instances of Person and names "Person A", "Person B", "Person C" and ids 2, 2, 2.Create a set "unique_persons" of this list.Print the number of elements in the set.
Defines a class "Person" which takes name and id as constructor arguments.Extend the class with a function __hash__ which uses the id property as hash value.Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.Create a list "persons" with instances of Person and names "Person A", "Person B", "Person C" and ids 1, 2, 3.Create a set "unique_persons" of this list.Print the number of elements in the set.
Defines a class "Person" which takes name and id as constructor arguments.Extend the class with a function __hash__ which uses the name property as hash value.Extend the class with a function __eq__ which returns true, if the hash value of the passed object and self are identical.Create a list "persons" with instances of Person and names "Person A", "Person B", "Person B" and ids 1, 1, 1.Create a set "unique_persons" of this list.Print the number of elements in the set.
Python got drunk and the built-in functions str() and int() are acting odd: 
# str(4) = 4
# str("4") = 4
# int("4") = "4"
# int(4) = "4".Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = "4".Create a function called str_to_int() that converts integers into strings. E.g., str_to_int("4") = 4.Create a list named "my_result" with elements int_to_str(29348) and str_to_int("29348").Print the list.
Python got drunk and the built-in functions str() and int() are acting odd: 
# str(4) = 4
# str("4") = 4
# int("4") = "4"
# int(4) = "4".Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = "4".Create a function called str_to_int() that converts integers into strings. E.g., str_to_int("4") = 4.Create a list named "my_result" with elements int_to_str(1) and str_to_int("1").Print the list.
Python got drunk and the built-in functions str() and int() are acting odd: 
# str(4) = 4
# str("4") = 4
# int("4") = "4"
# int(4) = "4".Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = "4".Create a function called str_to_int() that converts integers into strings. E.g., str_to_int("4") = 4.Create a list named "my_result" with elements int_to_str(123) and str_to_int("123").Print the list.
Python got drunk and the built-in functions str() and int() are acting odd: 
# str(4) = 4
# str("4") = 4
# int("4") = "4"
# int(4) = "4".Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = "4".Create a function called str_to_int() that converts integers into strings. E.g., str_to_int("4") = 4.Create a list named "my_result" with elements int_to_str(2344) and str_to_int("2344").Print the list.
Python got drunk and the built-in functions str() and int() are acting odd: 
# str(4) = 4
# str("4") = 4
# int("4") = "4"
# int(4) = "4".Create a function called int_to_str() that converts integers into strings. E.g., int_to_str(4) = "4".Create a function called str_to_int() that converts integers into strings. E.g., str_to_int("4") = 4.Create a list named "my_result" with elements int_to_str(-1) and str_to_int("-1").Print the list.
Initialize dictionary of Morse codes named 'chars_to_dots' with values ['A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.','G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..','M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.','S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-','Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----','1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....','6': '-....', '7': '--...', '8': '---..', '9': '----.','&': '.-...', "'": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-','-': '-....-', '+': '.-.-.', '"': '.-..-.', '?': '..--..', '/': '-..-.']Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent.Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string.Encode 'Hello World' to morse code and assign the result to 'morse_code'.Decode the variable named 'morse_code' to a string named 'decoded_text'.Print the variable named 'decoded_text'.
Initialize dictionary of Morse codes named 'chars_to_dots' with values ['A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.','G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..','M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.','S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-','Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----','1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....','6': '-....', '7': '--...', '8': '---..', '9': '----.','&': '.-...', "'": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-','-': '-....-', '+': '.-.-.', '"': '.-..-.', '?': '..--..', '/': '-..-.']Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent.Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string.Encode 'Hello Foo' to morse code and assign the result to 'morse_code'.Decode the variable named 'morse_code' to a string named 'decoded_text'.Print the variable named 'decoded_text'.
Initialize dictionary of Morse codes named 'chars_to_dots' with values ['A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.','G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..','M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.','S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-','Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----','1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....','6': '-....', '7': '--...', '8': '---..', '9': '----.','&': '.-...', "'": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-','-': '-....-', '+': '.-.-.', '"': '.-..-.', '?': '..--..', '/': '-..-.']Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent.Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string.Encode 'Hello WORLD' to morse code and assign the result to 'morse_code'.Decode the variable named 'morse_code' to a string named 'decoded_text'.Print the variable named 'decoded_text'.
Initialize dictionary of Morse codes named 'chars_to_dots' with values ['A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.','G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..','M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.','S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-','Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----','1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....','6': '-....', '7': '--...', '8': '---..', '9': '----.','&': '.-...', "'": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-','-': '-....-', '+': '.-.-.', '"': '.-..-.', '?': '..--..', '/': '-..-.']Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent.Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string.Encode 'foo BAR' to morse code and assign the result to 'morse_code'.Decode the variable named 'morse_code' to a string named 'decoded_text'.Print the variable named 'decoded_text'.
Initialize dictionary of Morse codes named 'chars_to_dots' with values ['A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.','G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..','M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.','S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-','Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----','1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....','6': '-....', '7': '--...', '8': '---..', '9': '----.','&': '.-...', "'": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-','-': '-....-', '+': '.-.-.', '"': '.-..-.', '?': '..--..', '/': '-..-.']Create a function named 'encode_morse' that takes a string as an argument and returns the Morse code equivalent.Create a function named 'decode_morse' that takes a Morse code as an argument and returns the decodes string.Encode 'This is a long string' to morse code and assign the result to 'morse_code'.Decode the variable named 'morse_code' to a string named 'decoded_text'.Print the variable named 'decoded_text'.
Initialize a list of integers with [0,1,2,3] and a variable named target with a value of 4.Implement a function "two_sum" solving two sum problem given a list of integers and a target argument.Run the function and print out the result.
Initialize a list of integers with [1, 11, 111] and a variable named target with a value of 122.Implement a function "two_sum" solving two sum problem given a list of integers and a target argument.Run the function and print out the result.
Initialize a list of integers with [-1, 0, 2, 4] and a variable named target with a value of 3.Implement a function "two_sum" solving two sum problem given a list of integers and a target argument.Run the function and print out the result.
Initialize a list of integers with [10, 20, 30, 40] and a variable named target with a value of 70.Implement a function "two_sum" solving two sum problem given a list of integers and a target argument.Run the function and print out the result.
Initialize a list of integers with [-1, -1, 123, -123] and a variable named target with a value of 0.Implement a function "two_sum" solving two sum problem given a list of integers and a target argument.Run the function and print out the result.
Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).Call the function to sample 100 points named points1 centered at (10, 10) with standard deviation (1, 1).Call the function to sample 100 points named points2 centered at (-10, -10) with standard deviation (1, 1).Concatenate these data points.Implement the k-means clustering algorithm with n iterations and the centroids as return value.Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to "my_centroids".Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of "(x1, y1), (x2, y2)".
Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).Call the function to sample 100 points named points1 centered at (20, 20) with standard deviation (1, 1).Call the function to sample 100 points named points2 centered at (-20, -20) with standard deviation (1, 1).Concatenate these data points.Implement the k-means clustering algorithm with n iterations and the centroids as return value.Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to "my_centroids".Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of "(x1, y1), (x2, y2)".
Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).Call the function to sample 100 points named points1 centered at (30, 30) with standard deviation (1, 1).Call the function to sample 100 points named points2 centered at (-30, -30) with standard deviation (1, 1).Concatenate these data points.Implement the k-means clustering algorithm with n iterations and the centroids as return value.Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to "my_centroids".Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of "(x1, y1), (x2, y2)".
Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).Call the function to sample 100 points named points1 centered at (40, 40) with standard deviation (1, 1).Call the function to sample 100 points named points2 centered at (-40, -40) with standard deviation (1, 1).Concatenate these data points.Implement the k-means clustering algorithm with n iterations and the centroids as return value.Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to "my_centroids".Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of "(x1, y1), (x2, y2)".
Implement a function to sample n points from a bivariate normal distribution with mean (x_mean, y_mean) and standard deviation (x_std, y_std).Call the function to sample 100 points named points1 centered at (50, 50) with standard deviation (1, 1).Call the function to sample 100 points named points2 centered at (-50, -50) with standard deviation (1, 1).Concatenate these data points.Implement the k-means clustering algorithm with n iterations and the centroids as return value.Run the algorithm on the points for 100 iterations with 2 clusters and assign the result to "my_centroids".Assign the centroid with negative coordinates to c1 and the one with positive coordinates to c2.Round the coordinates element-wise to the nearest integers and print the two centroids c1, c2 in the format of "(x1, y1), (x2, y2)".
Define a list of integers named "elements" with values [1].Calculate the sum of the even numbers of the list and store the result to variable "even".Calculate the sum of the odd numbers in the same list and store the result to "odd".Create a list named "my_result" containing the variables even and odd.Print the list.
Define a list of integers named "elements" with values [2e+100, 5e+100, -11, 10].Calculate the sum of the even numbers of the list and store the result to variable "even".Calculate the sum of the odd numbers in the same list and store the result to "odd".Create a list named "my_result" containing the variables even and odd.Print the list.
Define a list of integers named "elements" with values [].Calculate the sum of the even numbers of the list and store the result to variable "even".Calculate the sum of the odd numbers in the same list and store the result to "odd".Create a list named "my_result" containing the variables even and odd.Print the list.
Define a list of integers named "elements" with values [-5, 1, 6, -25, -36, 6].Calculate the sum of the even numbers of the list and store the result to variable "even".Calculate the sum of the odd numbers in the same list and store the result to "odd".Create a list named "my_result" containing the variables even and odd.Print the list.
Define a list of integers named "elements" with values [73, 4, 14, 95, 69, 57, 82, 4, 75, 50, 91, 4, 83, 89, 61, 67, 53, 54, 48, 10].Calculate the sum of the even numbers of the list and store the result to variable "even".Calculate the sum of the odd numbers in the same list and store the result to "odd".Create a list named "my_result" containing the variables even and odd.Print the list.
Define a list named "elements" with the values ['a', 'b', 'c', 'd', 'e', 'f', 'g'].Count the number of zeros in variable elements and store the value into variable "zero_count".Scan through the list in order and remove all the zeros, store the result into variable "non_zero".Merge the variable non_zero and a new list containing "zero_count" 0s and store the result to "result". Print the variable "result".
Define a list named "elements" with the values ['a', 0, 0, 'b', 'c', 'd', 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9].Count the number of zeros in variable elements and store the value into variable "zero_count".Scan through the list in order and remove all the zeros, store the result into variable "non_zero".Merge the variable non_zero and a new list containing "zero_count" 0s and store the result to "result". Print the variable "result".
Define a list named "elements" with the values [0].Count the number of zeros in variable elements and store the value into variable "zero_count".Scan through the list in order and remove all the zeros, store the result into variable "non_zero".Merge the variable non_zero and a new list containing "zero_count" 0s and store the result to "result". Print the variable "result".
Define a list named "elements" with the values [-1, 0, 1e-05, 0, 1e-30, 0].Count the number of zeros in variable elements and store the value into variable "zero_count".Scan through the list in order and remove all the zeros, store the result into variable "non_zero".Merge the variable non_zero and a new list containing "zero_count" 0s and store the result to "result". Print the variable "result".
Define a list named "elements" with the values [0, 1, None, 2, False, 1, 0].Count the number of zeros in variable elements and store the value into variable "zero_count".Scan through the list in order and remove all the zeros, store the result into variable "non_zero".Merge the variable non_zero and a new list containing "zero_count" 0s and store the result to "result". Print the variable "result".
Import numpy and initialize a numpy array named X with values [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49].Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.Call the function 1000 times and stack the arrays into a new 2d array named "samples".Calculate the mean of each element in variable "sample" and store the result to "mean".Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named "percentile".Print the variable "percentile".
Import numpy and initialize a numpy array named X with values consisting of 1000 randomly sampled integers ranging from 0 to 10.Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.Call the function 1000 times and stack the arrays into a new 2d array named "samples".Calculate the mean of each element in variable "sample" and store the result to "mean".Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named "percentile".Print the variable "percentile".
Import numpy and initialize a numpy array named X with values consisting of 1000 randomly sampled integers ranging from 0 to 10.Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.Call the function 10000 times and stack the arrays into a new 2d array named "samples".Calculate the mean of each element in variable "sample" and store the result to "mean".Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named "percentile".Print the variable "percentile".
Import numpy and initialize a numpy array named X with values consisting of 1000 uniformly sampled floats in [0, 1).Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.Call the function 1000 times and stack the arrays into a new 2d array named "samples".Calculate the mean of each element in variable "sample" and store the result to "mean".Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named "percentile".Print the variable "percentile".
Import numpy and initialize a numpy array named X with values [1, 1, 1, 1, 1, 1, 1, 1, 1, 1].Write a function that can take a numpy array and return an array of same size consisting of samples with replacement from the input.Call the function 100 times and stack the arrays into a new 2d array named "samples".Calculate the mean of each element in variable "sample" and store the result to "mean".Compute the 2.5 and 97.5 percentile of the variable mean and store the values into a new list named "percentile".Print the variable "percentile".
Given two positive integers 8 and 2, store the even single digits between a and b (inclusive) as "my_digits".Assign the sum of the even digits to the variable "result".Print the resulting number as integer.
Given two positive integers 2 and 8, store the even single digits between a and b (inclusive) as "my_digits".Assign the sum of the even digits to the variable "result".Print the resulting number as integer.
Given two positive integers 2 and 6, store the even single digits between a and b (inclusive) as "my_digits".Assign the sum of the even digits to the variable "result".Print the resulting number as integer.
Given two positive integers 132 and 6, store the even single digits between a and b (inclusive) as "my_digits".Assign the sum of the even digits to the variable "result".Print the resulting number as integer.
Given two positive integers 17 and 96, store the even single digits between a and b (inclusive) as "my_digits".Assign the sum of the even digits to the variable "result".Print the resulting number as integer.
Find the maximum element in the list [0, 4] and assign it to variable "my_max".Find the minimum element in the same list.Compute the different between "my_max" and the minimum element.Print the difference
Find the maximum element in the list [4, 0] and assign it to variable "my_max".Find the minimum element in the same list.Compute the different between "my_max" and the minimum element.Print the difference
Find the maximum element in the list [0] and assign it to variable "my_max".Find the minimum element in the same list.Compute the different between "my_max" and the minimum element.Print the difference
Find the maximum element in the list [0, 7, 6] and assign it to variable "my_max".Find the minimum element in the same list.Compute the different between "my_max" and the minimum element.Print the difference
Find the maximum element in the list [2, 4, 7, 20, 6] and assign it to variable "my_max".Find the minimum element in the same list.Compute the different between "my_max" and the minimum element.Print the difference
Assign the string "abcde" to a variable named "my_string".Lowercase the given string "my_string".Assign the distinct characters of the string to a variable named "chars".Sort these characters in alphabetical order.Print the resulting list of characters.
Assign the string "abcdecadeCADE" to a variable named "my_string".Lowercase the given string "my_string".Assign the distinct characters of the string to a variable named "chars".Sort these characters in alphabetical order.Print the resulting list of characters.
Assign the string "aaaaAAAAaaaa" to a variable named "my_string".Lowercase the given string "my_string".Assign the distinct characters of the string to a variable named "chars".Sort these characters in alphabetical order.Print the resulting list of characters.
Assign the string "Jerry jERRY JeRRRY" to a variable named "my_string".Lowercase the given string "my_string".Assign the distinct characters of the string to a variable named "chars".Sort these characters in alphabetical order.Print the resulting list of characters.
Assign the string "ddddc" to a variable named "my_string".Lowercase the given string "my_string".Assign the distinct characters of the string to a variable named "chars".Sort these characters in alphabetical order.Print the resulting list of characters.
Create two variables "a" and "b" for the strings "abcde" and "ab", respectively.Define a function "len_str" that returns the length of a string.Assign the length of each string to a seperate variable.Assign the longer string to the variable "result".Print the resulting string.
Create two variables "a" and "b" for the strings "ab" and "abcde", respectively.Define a function "len_str" that returns the length of a string.Assign the length of each string to a seperate variable.Assign the longer string to the variable "result".Print the resulting string.
Create two variables "a" and "b" for the strings "a" and "aa", respectively.Define a function "len_str" that returns the length of a string.Assign the length of each string to a seperate variable.Assign the longer string to the variable "result".Print the resulting string.
Create two variables "a" and "b" for the strings "aaaaaaaaaa" and "cdeee", respectively.Define a function "len_str" that returns the length of a string.Assign the length of each string to a seperate variable.Assign the longer string to the variable "result".Print the resulting string.
Create two variables "a" and "b" for the strings "f" and "gg", respectively.Define a function "len_str" that returns the length of a string.Assign the length of each string to a seperate variable.Assign the longer string to the variable "result".Print the resulting string.
Assign the positive floating point number 17.82 to a variable "f".Compute the integer part of the number as variable "a".Assign the digits of the fractional part of the floating point number to an integer variable "b".Add them together and print the result.
Assign the positive floating point number 1.1 to a variable "f".Compute the integer part of the number as variable "a".Assign the digits of the fractional part of the floating point number to an integer variable "b".Add them together and print the result.
Assign the positive floating point number 1000000.0000001 to a variable "f".Compute the integer part of the number as variable "a".Assign the digits of the fractional part of the floating point number to an integer variable "b".Add them together and print the result.
Assign the positive floating point number 0.0101 to a variable "f".Compute the integer part of the number as variable "a".Assign the digits of the fractional part of the floating point number to an integer variable "b".Add them together and print the result.
Assign the positive floating point number 100.5 to a variable "f".Compute the integer part of the number as variable "a".Assign the digits of the fractional part of the floating point number to an integer variable "b".Add them together and print the result.
Assign the string value CelebrAtion to a variable "my_string".Lowercase the defined string.Count the number of vowelsPrint out the number
Assign the string value PaLm to a variable "my_string".Lowercase the defined string.Count the number of vowelsPrint out the number
Assign the string value PrEdictiOn to a variable "my_string".Lowercase the defined string.Count the number of vowelsPrint out the number
Assign the string value  to a variable "my_string".Lowercase the defined string.Count the number of vowelsPrint out the number
Assign the string value ABC to a variable "my_string".Lowercase the defined string.Count the number of vowelsPrint out the number
Assign the positive integer 2 to a variable "f".Create a list from 1 to "f" (inclusive).Create and initialize a variable named "factorial".Compute the product of all the values in the list and assign the product to "factorial".Print out the variable "factorial".
Assign the positive integer 4 to a variable "f".Create a list from 1 to "f" (inclusive).Create and initialize a variable named "factorial".Compute the product of all the values in the list and assign the product to "factorial".Print out the variable "factorial".
Assign the positive integer 10 to a variable "f".Create a list from 1 to "f" (inclusive).Create and initialize a variable named "factorial".Compute the product of all the values in the list and assign the product to "factorial".Print out the variable "factorial".
Assign the positive integer 1 to a variable "f".Create a list from 1 to "f" (inclusive).Create and initialize a variable named "factorial".Compute the product of all the values in the list and assign the product to "factorial".Print out the variable "factorial".
Assign the positive integer 5 to a variable "f".Create a list from 1 to "f" (inclusive).Create and initialize a variable named "factorial".Compute the product of all the values in the list and assign the product to "factorial".Print out the variable "factorial".
Given two positive integers, 8 9, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable "two-edges".Compute the maximum length of the third edge by substracting 1 from "two-edges" and store the value in a variable "maximum-edge".Compute the minimum length of the third edge and store the value in a variable "minimum-edge".Assign value of maximum-edge and minimum-edge to a tuple named "my_tuple".Print the variable "my_tuple".
Given two positive integers, 5 7, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable "two-edges".Compute the maximum length of the third edge by substracting 1 from "two-edges" and store the value in a variable "maximum-edge".Compute the minimum length of the third edge and store the value in a variable "minimum-edge".Assign value of maximum-edge and minimum-edge to a tuple named "my_tuple".Print the variable "my_tuple".
Given two positive integers, 9 2, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable "two-edges".Compute the maximum length of the third edge by substracting 1 from "two-edges" and store the value in a variable "maximum-edge".Compute the minimum length of the third edge and store the value in a variable "minimum-edge".Assign value of maximum-edge and minimum-edge to a tuple named "my_tuple".Print the variable "my_tuple".
Given two positive integers, 1 1, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable "two-edges".Compute the maximum length of the third edge by substracting 1 from "two-edges" and store the value in a variable "maximum-edge".Compute the minimum length of the third edge and store the value in a variable "minimum-edge".Assign value of maximum-edge and minimum-edge to a tuple named "my_tuple".Print the variable "my_tuple".
Given two positive integers, 1000 1000, which are the lengths of two edges of a triangle, compute the sum of the two edges and store it in a variable "two-edges".Compute the maximum length of the third edge by substracting 1 from "two-edges" and store the value in a variable "maximum-edge".Compute the minimum length of the third edge and store the value in a variable "minimum-edge".Assign value of maximum-edge and minimum-edge to a tuple named "my_tuple".Print the variable "my_tuple".
Compute factorialImplement a function to compute the remainder when dividing a number by 10Print out the remainder when dividing the factorial of 2 by 10
Compute factorialImplement a function to compute the remainder when dividing a number by 10Print out the remainder when dividing the factorial of 4 by 10
Compute factorialImplement a function to compute the remainder when dividing a number by 10Print out the remainder when dividing the factorial of 10 by 10
Compute factorialImplement a function to compute the remainder when dividing a number by 10Print out the remainder when dividing the factorial of 1 by 10
Compute factorialImplement a function to compute the remainder when dividing a number by 10Print out the remainder when dividing the factorial of 5 by 10
Given a positive integer 3 and create a variable named "n" with this valueCompute the the total sum of internal angles in degrees of a regular-polygon with "n" sidesConvert the angle from degrees to radiansRound the angle to have two decimal digitsPrint out the angle
Given a positive integer 4 and create a variable named "n" with this valueCompute the the total sum of internal angles in degrees of a regular-polygon with "n" sidesConvert the angle from degrees to radiansRound the angle to have two decimal digitsPrint out the angle
Given a positive integer 1000 and create a variable named "n" with this valueCompute the the total sum of internal angles in degrees of a regular-polygon with "n" sidesConvert the angle from degrees to radiansRound the angle to have two decimal digitsPrint out the angle
Given a positive integer 10 and create a variable named "n" with this valueCompute the the total sum of internal angles in degrees of a regular-polygon with "n" sidesConvert the angle from degrees to radiansRound the angle to have two decimal digitsPrint out the angle
Given a positive integer 100 and create a variable named "n" with this valueCompute the the total sum of internal angles in degrees of a regular-polygon with "n" sidesConvert the angle from degrees to radiansRound the angle to have two decimal digitsPrint out the angle
Assign two strings 111 and 222 to the variable named s1 and the variable named s2 respectivelyConvert s1 and s2 to integersCompute the sum of the two integers and store it as the variable sPrint out the variable s
Assign two strings 2 and 4 to the variable named s1 and the variable named s2 respectivelyConvert s1 and s2 to integersCompute the sum of the two integers and store it as the variable sPrint out the variable s
Assign two strings 0 and 12 to the variable named s1 and the variable named s2 respectivelyConvert s1 and s2 to integersCompute the sum of the two integers and store it as the variable sPrint out the variable s
Assign two strings 50 and 100 to the variable named s1 and the variable named s2 respectivelyConvert s1 and s2 to integersCompute the sum of the two integers and store it as the variable sPrint out the variable s
Assign two strings 10000 and 1 to the variable named s1 and the variable named s2 respectivelyConvert s1 and s2 to integersCompute the sum of the two integers and store it as the variable sPrint out the variable s
Initialize the variable named lst with an integer list [4, 3, 8, 2].Find the maximum of the variable lst and assign it to a variable named ma.Find the minimum of the variable lst and assign to a variable named mi.Create a list from mi and ma (inclusive).Print the sum of this list.
Initialize the variable named lst with an integer list [17, 16, 15, 10, 11, 12].Find the maximum of the variable lst and assign it to a variable named ma.Find the minimum of the variable lst and assign to a variable named mi.Create a list from mi and ma (inclusive).Print the sum of this list.
Initialize the variable named lst with an integer list [1, 2].Find the maximum of the variable lst and assign it to a variable named ma.Find the minimum of the variable lst and assign to a variable named mi.Create a list from mi and ma (inclusive).Print the sum of this list.
Initialize the variable named lst with an integer list [10].Find the maximum of the variable lst and assign it to a variable named ma.Find the minimum of the variable lst and assign to a variable named mi.Create a list from mi and ma (inclusive).Print the sum of this list.
Initialize the variable named lst with an integer list [1, 100].Find the maximum of the variable lst and assign it to a variable named ma.Find the minimum of the variable lst and assign to a variable named mi.Create a list from mi and ma (inclusive).Print the sum of this list.
Implement a function to return the characters shared between two words.Implement a function to find the number of vowels in a string.Find the shared characters of meaty and apple, concatenate them into a string, and assign it to a variable named s.Print the number of vowels in the variable s
Implement a function to return the characters shared between two words.Implement a function to find the number of vowels in a string.Find the shared characters of fan and forsook, concatenate them into a string, and assign it to a variable named s.Print the number of vowels in the variable s
Implement a function to return the characters shared between two words.Implement a function to find the number of vowels in a string.Find the shared characters of spout and shout, concatenate them into a string, and assign it to a variable named s.Print the number of vowels in the variable s
Implement a function to return the characters shared between two words.Implement a function to find the number of vowels in a string.Find the shared characters of happiness and fitness, concatenate them into a string, and assign it to a variable named s.Print the number of vowels in the variable s
Implement a function to return the characters shared between two words.Implement a function to find the number of vowels in a string.Find the shared characters of code and fork, concatenate them into a string, and assign it to a variable named s.Print the number of vowels in the variable s
Given a list of integers [-1, -2, 0, 1, 5], assign the list to a varialbe named lst1.Find the negative numbers of the list and assign it to a new variable named lst2Compute the sum of numbers in lst2Print out the sum
Given a list of integers [5, 2, 0, 5, 10], assign the list to a varialbe named lst1.Find the negative numbers of the list and assign it to a new variable named lst2Compute the sum of numbers in lst2Print out the sum
Given a list of integers [-100, -20, -3, 0, 0], assign the list to a varialbe named lst1.Find the negative numbers of the list and assign it to a new variable named lst2Compute the sum of numbers in lst2Print out the sum
Given a list of integers [-23, -2, -5, 1000, 23, -10, -100, -10], assign the list to a varialbe named lst1.Find the negative numbers of the list and assign it to a new variable named lst2Compute the sum of numbers in lst2Print out the sum
Given a list of integers [5, 1000, 0, 1, 0, 0, 0, 1, 1], assign the list to a varialbe named lst1.Find the negative numbers of the list and assign it to a new variable named lst2Compute the sum of numbers in lst2Print out the sum
Import the pandas library.Read a dataframe "df" from the csv file located in "./datasets/mlbootcamp5_train.csv".Group by the column "gender" and assign the value counts for "alco" to a variable named "my_counts".Assign the attribute "values" of this variable and to a new variable named "plain_list".Print the maximum element of this list.
Import the pandas library.Read a dataframe "df" from the csv file located in "./datasets/mlbootcamp5_train.csv".Group by the column "gender" and assign the value counts for "age" to a variable named "my_counts".Assign the attribute "values" of this variable and to a new variable named "plain_list".Print the maximum element of this list.
Import the pandas library.Read a dataframe "df" from the csv file located in "./datasets/mlbootcamp5_train.csv".Group by the column "gender" and assign the value counts for "smoke" to a variable named "my_counts".Assign the attribute "values" of this variable and to a new variable named "plain_list".Print the maximum element of this list.
Import the pandas library.Read a dataframe "df" from the csv file located in "./datasets/mlbootcamp5_train.csv".Group by the column "gender" and assign the value counts for "active" to a variable named "my_counts".Assign the attribute "values" of this variable and to a new variable named "plain_list".Print the maximum element of this list.
Import the pandas library.Read a dataframe "df" from the csv file located in "./datasets/mlbootcamp5_train.csv".Group by the column "gender" and assign the value counts for "weight" to a variable named "my_counts".Assign the attribute "values" of this variable and to a new variable named "plain_list".Print the maximum element of this list.
Define a string named 's' with the value 'Hello, World!'.Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'Use the variable 'pattern' to substitute all the commas and periods in the string 's' and store the result to variable 's2'Split the string 's2' into a list of words with a space and store the result to variable 'words'Print a list of integers consisting of the length of each word in 'words'
Define a string named 's' with the value 'Raising Skinny Elephants Is Utterly Boring'.Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'Use the variable 'pattern' to substitute all the commas and periods in the string 's' and store the result to variable 's2'Split the string 's2' into a list of words with a space and store the result to variable 'words'Print a list of integers consisting of the length of each word in 'words'
Define a string named 's' with the value 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. '.Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'Use the variable 'pattern' to substitute all the commas and periods in the string 's' and store the result to variable 's2'Split the string 's2' into a list of words with a space and store the result to variable 'words'Print a list of integers consisting of the length of each word in 'words'
Define a string named 's' with the value ',.'.Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'Use the variable 'pattern' to substitute all the commas and periods in the string 's' and store the result to variable 's2'Split the string 's2' into a list of words with a space and store the result to variable 'words'Print a list of integers consisting of the length of each word in 'words'
Define a string named 's' with the value 'Wow! Is this a real sentence?'.Import re and compile a regular expression that matches comma and period and store the result to variable 'pattern'Use the variable 'pattern' to substitute all the commas and periods in the string 's' and store the result to variable 's2'Split the string 's2' into a list of words with a space and store the result to variable 'words'Print a list of integers consisting of the length of each word in 'words'
Create a variable named 's' with the value '#FFF'.Lowercase the variable 's' and store the result to variable 's2'.Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'.Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'.Print True if the variable 's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.
Create a variable named 's' with the value '#egacea'.Lowercase the variable 's' and store the result to variable 's2'.Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'.Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'.Print True if the variable 's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.
Create a variable named 's' with the value '#12'.Lowercase the variable 's' and store the result to variable 's2'.Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'.Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'.Print True if the variable 's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.
Create a variable named 's' with the value '123456'.Lowercase the variable 's' and store the result to variable 's2'.Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'.Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'.Print True if the variable 's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.
Create a variable named 's' with the value '#ffb600'.Lowercase the variable 's' and store the result to variable 's2'.Import re and compile a regular expression that matches a sharp symbol followed by three hexadecimal digits (0-9, a-f), store the result to variable 'pattern3'.Compile a regular expression that matches a sharp symbol followed by six hexadecimal digits (0-9, a-f), store the result to variable 'pattern6'.Print True if the variable 's2' if it matches with either of variables 'pattern3' or 'pattern6', False otherwise.
Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list.Apply the function 'count_values' to the list '[1, 1, 2, 2, 2, 2]' and store the result to variable 'counts'.Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.
Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list.Apply the function 'count_values' to the list '[]' and store the result to variable 'counts'.Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.
Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list.Apply the function 'count_values' to the list '[100, 100, 0]' and store the result to variable 'counts'.Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.
Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list.Apply the function 'count_values' to the list '[0, 0, 0, 0, 0, 1, 1, 1, 1]' and store the result to variable 'counts'.Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.
Create a function called 'count_values' that takes a list of integers and returns a hash map of the number of times each integer appears in the list.Apply the function 'count_values' to the list '[1, 2, 3, 4, 5, 6, 6, 6, 6, 6]' and store the result to variable 'counts'.Print the integer with maximum count in the hash map 'counts', if the count is larger than half of the length of the list, otherwise print 'None'.
Import datetime and initialize a datetime object named 'today' with 1/28/1990 (month/day/year).Add 7 days to the variable 'today' and store the result to variable 'week'.Print 'week' in the format '%m/%d/%Y'.
Import datetime and initialize a datetime object named 'today' with 2/26/2000 (month/day/year).Add 7 days to the variable 'today' and store the result to variable 'week'.Print 'week' in the format '%m/%d/%Y'.
Import datetime and initialize a datetime object named 'today' with 12/28/2022 (month/day/year).Add 7 days to the variable 'today' and store the result to variable 'week'.Print 'week' in the format '%m/%d/%Y'.
Import datetime and initialize a datetime object named 'today' with 11/5/1274 (month/day/year).Add 7 days to the variable 'today' and store the result to variable 'week'.Print 'week' in the format '%m/%d/%Y'.
Import datetime and initialize a datetime object named 'today' with 7/30/1600 (month/day/year).Add 7 days to the variable 'today' and store the result to variable 'week'.Print 'week' in the format '%m/%d/%Y'.
Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string.Given a list of strings named 'words' with the value ['apple', 'banana', 'carrot']', apply the function 'word_weight' to each word and store the result to variable 'weights'.Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string.Given a list of strings named 'words' with the value ["I'll", 'see', 'trees.']', apply the function 'word_weight' to each word and store the result to variable 'weights'.Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string.Given a list of strings named 'words' with the value ['a...', 'b?', 'c!', 'd']', apply the function 'word_weight' to each word and store the result to variable 'weights'.Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string.Given a list of strings named 'words' with the value ['', 'a', 'A']', apply the function 'word_weight' to each word and store the result to variable 'weights'.Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
Create a function named 'word_weight' that takes a string as input and returns the sum of ASCII values of each alphabet in the string.Given a list of strings named 'words' with the value ['ABC', 'ghijklmno', 'def']', apply the function 'word_weight' to each word and store the result to variable 'weights'.Print 'True' if the sorted 'weights' is the same as the original 'weights', otherwise 'False'.
Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result.Define an integer variable named 'base' with the value 123456.While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'.Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.
Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result.Define an integer variable named 'base' with the value 1234.While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'.Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.
Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result.Define an integer variable named 'base' with the value 123212.While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'.Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.
Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result.Define an integer variable named 'base' with the value 11211230.While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'.Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.
Create a function named 'is_palindrome' that takes an integer as input and returns if the integer is a palindrome, by comparing stringified integer and its reversed string.Create a function named 'descent' that takes an integer as input and add each pair of adjacent digits together and return the result.Define an integer variable named 'base' with the value 1112212124000131.While the variable 'base' is not a single digit, apply the function 'is_palindrome' on 'base' and break if 'base' is palindrome. Otherwise, apply the function 'descent' to the variable 'base' and store the result to variable 'base'.Print 'False' if the variable 'base' is a single digit, otherwise print 'True'.
Define a string variable named 'input' with the value 'he@@l@hel@llo', as well as an empty list named 'stack'.Iterating over variable 'input', if the current character is '@' and 'stack' is not empty, pop the last element from 'stack', otherwise append the character to 'stack'.Print the joined string from 'stack'.
Define a string variable named 'input' with the value '@@@@', as well as an empty list named 'stack'.Iterating over variable 'input', if the current character is '@' and 'stack' is not empty, pop the last element from 'stack', otherwise append the character to 'stack'.Print the joined string from 'stack'.
Define a string variable named 'input' with the value 'si@@@t boy', as well as an empty list named 'stack'.Iterating over variable 'input', if the current character is '@' and 'stack' is not empty, pop the last element from 'stack', otherwise append the character to 'stack'.Print the joined string from 'stack'.
Define a string variable named 'input' with the value 'a@b@c@d@e@f@g@h@i@jkl', as well as an empty list named 'stack'.Iterating over variable 'input', if the current character is '@' and 'stack' is not empty, pop the last element from 'stack', otherwise append the character to 'stack'.Print the joined string from 'stack'.
Define a string variable named 'input' with the value 'hello   @@world', as well as an empty list named 'stack'.Iterating over variable 'input', if the current character is '@' and 'stack' is not empty, pop the last element from 'stack', otherwise append the character to 'stack'.Print the joined string from 'stack'.
Import the pandas library.Import the function train_test_split from sklearn.model_selection.Read the dataframe "df" from the csv file './datasets/melb_data.csv'.Assign the attribute "Price" to the target variable "y".Drop the column "Price" from the dataframe on axis 1 and assign the result to a variable named "melb_predictors".From "melb_predictors" select and exclude columns of dtype "object" and name the result "X".Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of 80%, test set size of 20%, random_state=0.Print the sum of the first column of x_train and the sum of y_train. Use the format "{{:.1f}} {{:.1f}}".
Import the pandas library.Import the function train_test_split from sklearn.model_selection.Read the dataframe "df" from the csv file './datasets/melb_data.csv'.Assign the attribute "Price" to the target variable "y".Drop the column "Price" from the dataframe on axis 1 and assign the result to a variable named "melb_predictors".From "melb_predictors" select and exclude columns of dtype "object" and name the result "X".Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of 50%, test set size of 50%, random_state=0.Print the sum of the first column of x_train and the sum of y_train. Use the format "{{:.1f}} {{:.1f}}".
Import the pandas library.Import the function train_test_split from sklearn.model_selection.Read the dataframe "df" from the csv file './datasets/melb_data.csv'.Assign the attribute "Price" to the target variable "y".Drop the column "Price" from the dataframe on axis 1 and assign the result to a variable named "melb_predictors".From "melb_predictors" select and exclude columns of dtype "object" and name the result "X".Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of 20%, test set size of 80%, random_state=0.Print the sum of the first column of x_train and the sum of y_train. Use the format "{{:.1f}} {{:.1f}}".
Import the pandas library.Import the function train_test_split from sklearn.model_selection.Read the dataframe "df" from the csv file './datasets/melb_data.csv'.Assign the attribute "Price" to the target variable "y".Drop the column "Price" from the dataframe on axis 1 and assign the result to a variable named "melb_predictors".From "melb_predictors" select and exclude columns of dtype "object" and name the result "X".Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of 10%, test set size of 90%, random_state=0.Print the sum of the first column of x_train and the sum of y_train. Use the format "{{:.1f}} {{:.1f}}".
Import the pandas library.Import the function train_test_split from sklearn.model_selection.Read the dataframe "df" from the csv file './datasets/melb_data.csv'.Assign the attribute "Price" to the target variable "y".Drop the column "Price" from the dataframe on axis 1 and assign the result to a variable named "melb_predictors".From "melb_predictors" select and exclude columns of dtype "object" and name the result "X".Divide data into training and validation subsets x_train, x_valid, y_train, y_valid with train set size of 90%, test set size of 10%, random_state=0.Print the sum of the first column of x_train and the sum of y_train. Use the format "{{:.1f}} {{:.1f}}".
Create a variable named lst1 with value [1, 3, 5, 7, 10]Find the minimum and maximum of lst1 and assign them to variables a and b respectivelyCreate a list from a to b (inclusive) and assign it to variable named lst2Find the elements that are in lst2 but not in lst1Print the sum of these elements
Create a variable named lst1 with value [10, 7, 5, 3, 1]Find the minimum and maximum of lst1 and assign them to variables a and b respectivelyCreate a list from a to b (inclusive) and assign it to variable named lst2Find the elements that are in lst2 but not in lst1Print the sum of these elements
Create a variable named lst1 with value [10, 20, 30, 40, 50, 60]Find the minimum and maximum of lst1 and assign them to variables a and b respectivelyCreate a list from a to b (inclusive) and assign it to variable named lst2Find the elements that are in lst2 but not in lst1Print the sum of these elements
Create a variable named lst1 with value [-100, 100]Find the minimum and maximum of lst1 and assign them to variables a and b respectivelyCreate a list from a to b (inclusive) and assign it to variable named lst2Find the elements that are in lst2 but not in lst1Print the sum of these elements
Create a variable named lst1 with value [-5, -10, 0, 10]Find the minimum and maximum of lst1 and assign them to variables a and b respectivelyCreate a list from a to b (inclusive) and assign it to variable named lst2Find the elements that are in lst2 but not in lst1Print the sum of these elements
Initialize the variable named lst1 with a list ['1a', 'a', '2b', 'b'].Create a function called num_in_str() to check whether a string contains a number.Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2Print out lst2
Initialize the variable named lst1 with a list ['abc', 'abc10'].Create a function called num_in_str() to check whether a string contains a number.Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2Print out lst2
Initialize the variable named lst1 with a list ['abc', 'ab10c', 'a10bc', 'bcd'].Create a function called num_in_str() to check whether a string contains a number.Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2Print out lst2
Initialize the variable named lst1 with a list ['this is a test', 'test1'].Create a function called num_in_str() to check whether a string contains a number.Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2Print out lst2
Initialize the variable named lst1 with a list ['t0t', '11', '0'].Create a function called num_in_str() to check whether a string contains a number.Call the function num_in_str() to find strings in lst1 that have numbers and assign them to a list named lst2Print out lst2
Define a function "a" that multiplies an integer argument by 2 and returns the result.Define a function "b" that multiplies an integer argument by 2 and returns the result.Define a function "c" that multiplies an integer argument by 2 and returns the result.Create a list named "abc" which contains the three functions in order of definition.Assign the integer 1 to a variable "my_init".Apply the first function of the list to "my_init" and name the result "my_result".For each subsequent function in the list, take the result of the previous function as input argument and assign the result to "my_result".Print the variable named "my_result".
Define a function "a" that multiplies an integer argument by 1 and returns the result.Define a function "b" that multiplies an integer argument by 1 and returns the result.Define a function "c" that multiplies an integer argument by 2 and returns the result.Create a list named "abc" which contains the three functions in order of definition.Assign the integer 1 to a variable "my_init".Apply the first function of the list to "my_init" and name the result "my_result".For each subsequent function in the list, take the result of the previous function as input argument and assign the result to "my_result".Print the variable named "my_result".
Define a function "a" that multiplies an integer argument by 2 and returns the result.Define a function "b" that multiplies an integer argument by 2 and returns the result.Define a function "c" that multiplies an integer argument by 2 and returns the result.Create a list named "abc" which contains the three functions in order of definition.Assign the integer 2 to a variable "my_init".Apply the first function of the list to "my_init" and name the result "my_result".For each subsequent function in the list, take the result of the previous function as input argument and assign the result to "my_result".Print the variable named "my_result".
Define a function "a" that multiplies an integer argument by -2 and returns the result.Define a function "b" that multiplies an integer argument by 2 and returns the result.Define a function "c" that multiplies an integer argument by 2 and returns the result.Create a list named "abc" which contains the three functions in order of definition.Assign the integer 1 to a variable "my_init".Apply the first function of the list to "my_init" and name the result "my_result".For each subsequent function in the list, take the result of the previous function as input argument and assign the result to "my_result".Print the variable named "my_result".
Define a function "a" that multiplies an integer argument by -2 and returns the result.Define a function "b" that multiplies an integer argument by -2 and returns the result.Define a function "c" that multiplies an integer argument by 2 and returns the result.Create a list named "abc" which contains the three functions in order of definition.Assign the integer 1 to a variable "my_init".Apply the first function of the list to "my_init" and name the result "my_result".For each subsequent function in the list, take the result of the previous function as input argument and assign the result to "my_result".Print the variable named "my_result".
This function "to_plural" takes list of words in the singular form and returns a set of those words in the plural form adding an "s" to the end of the words, if they appear more than once in the list. E.g., pluralize(["cow", "pig", "cow", "cow"]) = {{"cows", "pig"}}, pluralize(["table", "table", "table"]) = {{"tables"}}.Create a function "is_plural" which returns True if the word passed as argument is in plural form.Assign ["chair", "pencil", "arm", "arm"] to a variable named "words".Apply the function that returns plural forms to the variable "words" and name the result "words_plural".Define a boolean "contains_plural" and apply "is_plural" to each element of "words_plural" to detect if at least one word is in plural form.Print out whether or not "words_plural" contains a word in plural as boolean.
This function "to_plural" takes list of words in the singular form and returns a set of those words in the plural form adding an "s" to the end of the words, if they appear more than once in the list. E.g., pluralize(["cow", "pig", "cow", "cow"]) = {{"cows", "pig"}}, pluralize(["table", "table", "table"]) = {{"tables"}}.Create a function "is_plural" which returns True if the word passed as argument is in plural form.Assign ["arm", "arm", "arm", "arm"] to a variable named "words".Apply the function that returns plural forms to the variable "words" and name the result "words_plural".Define a boolean "contains_plural" and apply "is_plural" to each element of "words_plural" to detect if at least one word is in plural form.Print out whether or not "words_plural" contains a word in plural as boolean.
This function "to_plural" takes list of words in the singular form and returns a set of those words in the plural form adding an "s" to the end of the words, if they appear more than once in the list. E.g., pluralize(["cow", "pig", "cow", "cow"]) = {{"cows", "pig"}}, pluralize(["table", "table", "table"]) = {{"tables"}}.Create a function "is_plural" which returns True if the word passed as argument is in plural form.Assign ["chair", "arm", "pencil", "arm"] to a variable named "words".Apply the function that returns plural forms to the variable "words" and name the result "words_plural".Define a boolean "contains_plural" and apply "is_plural" to each element of "words_plural" to detect if at least one word is in plural form.Print out whether or not "words_plural" contains a word in plural as boolean.
This function "to_plural" takes list of words in the singular form and returns a set of those words in the plural form adding an "s" to the end of the words, if they appear more than once in the list. E.g., pluralize(["cow", "pig", "cow", "cow"]) = {{"cows", "pig"}}, pluralize(["table", "table", "table"]) = {{"tables"}}.Create a function "is_plural" which returns True if the word passed as argument is in plural form.Assign ["chair", "pencil", "arm"] to a variable named "words".Apply the function that returns plural forms to the variable "words" and name the result "words_plural".Define a boolean "contains_plural" and apply "is_plural" to each element of "words_plural" to detect if at least one word is in plural form.Print out whether or not "words_plural" contains a word in plural as boolean.
This function "to_plural" takes list of words in the singular form and returns a set of those words in the plural form adding an "s" to the end of the words, if they appear more than once in the list. E.g., pluralize(["cow", "pig", "cow", "cow"]) = {{"cows", "pig"}}, pluralize(["table", "table", "table"]) = {{"tables"}}.Create a function "is_plural" which returns True if the word passed as argument is in plural form.Assign ["chair", "pencil", "table"] to a variable named "words".Apply the function that returns plural forms to the variable "words" and name the result "words_plural".Define a boolean "contains_plural" and apply "is_plural" to each element of "words_plural" to detect if at least one word is in plural form.Print out whether or not "words_plural" contains a word in plural as boolean.
Assign the list of numbers "[1,2,3,4]" to a variable named "my_relative_altitude".Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.Find the larget number in the list my_net_altitude and print it out.
Assign the list of numbers "[-1,2,3,4]" to a variable named "my_relative_altitude".Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.Find the larget number in the list my_net_altitude and print it out.
Assign the list of numbers "[-1,-2,-3,-4]" to a variable named "my_relative_altitude".Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.Find the larget number in the list my_net_altitude and print it out.
Assign the list of numbers "[-1000000, 1, 2]" to a variable named "my_relative_altitude".Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.Find the larget number in the list my_net_altitude and print it out.
Assign the list of numbers "[-5, 1, 5, 0, -10]" to a variable named "my_relative_altitude".Compute the all prefix sum in the list ( 0 is the first element ) and store as my_net_altitude.Find the larget number in the list my_net_altitude and print it out.
Assign the list of words "['hello', 'world']" to a variable named "my_sentences".Assign an integer "1" to a variable named "k".Truncate the list such that it contains k words and store as truncated_listPrint out the variable truncated_list .
Assign the list of words "['hello', 'how', 'are', 'you', 'Jim']" to a variable named "my_sentences".Assign an integer "4" to a variable named "k".Truncate the list such that it contains k words and store as truncated_listPrint out the variable truncated_list .
Assign the list of words "['China', 'is', 'a', 'large', 'country']" to a variable named "my_sentences".Assign an integer "1" to a variable named "k".Truncate the list such that it contains k words and store as truncated_listPrint out the variable truncated_list .
Assign the list of words "['yes', 'yes', 'yes', 'yes', 'yes']" to a variable named "my_sentences".Assign an integer "4" to a variable named "k".Truncate the list such that it contains k words and store as truncated_listPrint out the variable truncated_list .
Assign the list of words "['what', 'is', 'your', 'name']" to a variable named "my_sentences".Assign an integer "1" to a variable named "k".Truncate the list such that it contains k words and store as truncated_listPrint out the variable truncated_list .
Assign the list of integers "[1, 2, 2, 2]" to a variable named "my_numbers".Count the frequencies of the integers in my_numbers.Find the integer that the frequency is 1 and store as one_time.Print out the variable one_time.
Assign the list of integers "[-1, 4, 4, 4, 4, 4]" to a variable named "my_numbers".Count the frequencies of the integers in my_numbers.Find the integer that the frequency is 1 and store as one_time.Print out the variable one_time.
Assign the list of integers "[-1, -4, 8, -4, 8]" to a variable named "my_numbers".Count the frequencies of the integers in my_numbers.Find the integer that the frequency is 1 and store as one_time.Print out the variable one_time.
Assign the list of integers "[-1000000, 1, 1]" to a variable named "my_numbers".Count the frequencies of the integers in my_numbers.Find the integer that the frequency is 1 and store as one_time.Print out the variable one_time.
Assign the list of integers "[10000, 2, 2, 2,2,2]" to a variable named "my_numbers".Count the frequencies of the integers in my_numbers.Find the integer that the frequency is 1 and store as one_time.Print out the variable one_time.
Assign the list of integers "[1, 2, 2, 2]" to a variable named "my_numbers".Assign an integer "2" to a variable named "val".Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.Print out the variable remove_numbers.
Assign the list of integers "[-1, 4, 4, 4, 4, 4]" to a variable named "my_numbers".Assign an integer "4" to a variable named "val".Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.Print out the variable remove_numbers.
Assign the list of integers "[-1, -4, 8, -4, 8]" to a variable named "my_numbers".Assign an integer "-1" to a variable named "val".Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.Print out the variable remove_numbers.
Assign the list of integers "[-1000000, 1, 1]" to a variable named "my_numbers".Assign an integer "1" to a variable named "val".Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.Print out the variable remove_numbers.
Assign the list of integers "[10000, 2, 2, 2,2,2]" to a variable named "my_numbers".Assign an integer "2" to a variable named "val".Remove all occurrences of val in my_numbers and store the removed list as remove_numbers.Print out the variable remove_numbers.
Assign the list of integers "[1, 2, 2, 2]" to a variable named "my_numbers".Assign an integer "2" to a variable named "val".Sum all the number in my_numbers and store as sum_numbers.Check whether the sum_numbers is equal to val. If yes, return "True", otherwise return "False".
Assign the list of integers "[-1, 5]" to a variable named "my_numbers".Assign an integer "4" to a variable named "val".Sum all the number in my_numbers and store as sum_numbers.Check whether the sum_numbers is equal to val. If yes, return "True", otherwise return "False".
Assign the list of integers "[-1, -1, -1, -1, 1]" to a variable named "my_numbers".Assign an integer "-5" to a variable named "val".Sum all the number in my_numbers and store as sum_numbers.Check whether the sum_numbers is equal to val. If yes, return "True", otherwise return "False".
Assign the list of integers "[-1000000, 1, 1]" to a variable named "my_numbers".Assign an integer "1" to a variable named "val".Sum all the number in my_numbers and store as sum_numbers.Check whether the sum_numbers is equal to val. If yes, return "True", otherwise return "False".
Assign the list of integers "[10000, 2, 2, 2,2,2]" to a variable named "my_numbers".Assign an integer "2" to a variable named "val".Sum all the number in my_numbers and store as sum_numbers.Check whether the sum_numbers is equal to val. If yes, return "True", otherwise return "False".
Assign a sorted list "[1, 2, 2, 2]" to a variable named "my_numbers1".Assign a sorted list "[3, 4]" to a variable named "my_numbers2".Merge the two sorted lists in a new sorted list and store as new_list.Print the sorted new_list.
Assign a sorted list "[-1, 5]" to a variable named "my_numbers1".Assign a sorted list "[1, 2]" to a variable named "my_numbers2".Merge the two sorted lists in a new sorted list and store as new_list.Print the sorted new_list.
Assign a sorted list "[-1, -1, -1, -1, 1]" to a variable named "my_numbers1".Assign a sorted list "[-1, 8]" to a variable named "my_numbers2".Merge the two sorted lists in a new sorted list and store as new_list.Print the sorted new_list.
Assign a sorted list "[-1000000, 1, 1]" to a variable named "my_numbers1".Assign a sorted list "[1, 6]" to a variable named "my_numbers2".Merge the two sorted lists in a new sorted list and store as new_list.Print the sorted new_list.
Assign a sorted list "[2, 2,2,2,2, 10000]" to a variable named "my_numbers1".Assign a sorted list "[-2, -1]" to a variable named "my_numbers2".Merge the two sorted lists in a new sorted list and store as new_list.Print the sorted new_list.
Assign an integer array "[1]" to a variable named "my_array".Find the contiguous subarray of my_array with the largest sum and store as max_subarray.Compute the sum of max_subarray and store as sum_subarry.Print out the variable sum_subarray.
Assign an integer array "[-1, 5]" to a variable named "my_array".Find the contiguous subarray of my_array with the largest sum and store as max_subarray.Compute the sum of max_subarray and store as sum_subarry.Print out the variable sum_subarray.
Assign an integer array "[-1, -1, -1, -1, 1]" to a variable named "my_array".Find the contiguous subarray of my_array with the largest sum and store as max_subarray.Compute the sum of max_subarray and store as sum_subarry.Print out the variable sum_subarray.
Assign an integer array "[-1000000, 1, 1]" to a variable named "my_array".Find the contiguous subarray of my_array with the largest sum and store as max_subarray.Compute the sum of max_subarray and store as sum_subarry.Print out the variable sum_subarray.
Assign an integer array "[2, 2,2,2,2, 10000]" to a variable named "my_array".Find the contiguous subarray of my_array with the largest sum and store as max_subarray.Compute the sum of max_subarray and store as sum_subarry.Print out the variable sum_subarray.
Assign the positive number "1" to a variable named "my_number".Compute the squre root of the number and store as square_root. Compute the largest integer but not larger than square_root and store as largest_square_root.Print the integer largest_square_root.
Assign the positive number "5" to a variable named "my_number".Compute the squre root of the number and store as square_root. Compute the largest integer but not larger than square_root and store as largest_square_root.Print the integer largest_square_root.
Assign the positive number "101" to a variable named "my_number".Compute the squre root of the number and store as square_root. Compute the largest integer but not larger than square_root and store as largest_square_root.Print the integer largest_square_root.
Assign the positive number "30" to a variable named "my_number".Compute the squre root of the number and store as square_root. Compute the largest integer but not larger than square_root and store as largest_square_root.Print the integer largest_square_root.
Assign the positive number "10000" to a variable named "my_number".Compute the squre root of the number and store as square_root. Compute the largest integer but not larger than square_root and store as largest_square_root.Print the integer largest_square_root.
Assign the list of words "['Hello', 'word']" to a variable named "my_words".Count the length of the words in the list and store as a dictionary word_count. Find the element with the largest count in dictionary word_count and store as longest_word.print the variable longest_word.
Assign the list of words "['a', 'good', 'place']" to a variable named "my_words".Count the length of the words in the list and store as a dictionary word_count. Find the element with the largest count in dictionary word_count and store as longest_word.print the variable longest_word.
Assign the list of words "['the', 'last', 'word', 'in', 'the', 'sentence']" to a variable named "my_words".Count the length of the words in the list and store as a dictionary word_count. Find the element with the largest count in dictionary word_count and store as longest_word.print the variable longest_word.
Assign the list of words "['good']" to a variable named "my_words".Count the length of the words in the list and store as a dictionary word_count. Find the element with the largest count in dictionary word_count and store as longest_word.print the variable longest_word.
Assign the list of words "['There', 'will', 'be', 'a', 'joy']" to a variable named "my_words".Count the length of the words in the list and store as a dictionary word_count. Find the element with the largest count in dictionary word_count and store as longest_word.print the variable longest_word.
Assign the list of numbers "[1,2,3]" to a variable named "my_numbers".Return the elements that appears exactly once in the above list and store as my_uniques.Compute the sum of the list my_uniques and print it out.
Assign the list of numbers "[1,1,1,1]" to a variable named "my_numbers".Return the elements that appears exactly once in the above list and store as my_uniques.Compute the sum of the list my_uniques and print it out.
Assign the list of numbers "[-1,-2,-3,-3]" to a variable named "my_numbers".Return the elements that appears exactly once in the above list and store as my_uniques.Compute the sum of the list my_uniques and print it out.
Assign the list of numbers "[-1000000, 1, 1, 2,2,3,3,3,3]" to a variable named "my_numbers".Return the elements that appears exactly once in the above list and store as my_uniques.Compute the sum of the list my_uniques and print it out.
Assign the list of numbers "[-5, 1, -5, 0, -10]" to a variable named "my_numbers".Return the elements that appears exactly once in the above list and store as my_uniques.Compute the sum of the list my_uniques and print it out.
Assign the matrix "[[3, 2], [2, 3]]" to a variable named "my_matrix".Find the diagonal elements of my matrix and store as diag_elements.print out the sum of the variable diag_elements.
Assign the matrix "[[3, 2, 5], [2, 3, 5]]" to a variable named "my_matrix".Find the diagonal elements of my matrix and store as diag_elements.print out the sum of the variable diag_elements.
Assign the matrix "[1]" to a variable named "my_matrix".Find the diagonal elements of my matrix and store as diag_elements.print out the sum of the variable diag_elements.
Assign the matrix "[[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]" to a variable named "my_matrix".Find the diagonal elements of my matrix and store as diag_elements.print out the sum of the variable diag_elements.
Assign the matrix "[5, 5, 5, 5, 5, 0]" to a variable named "my_matrix".Find the diagonal elements of my matrix and store as diag_elements.print out the sum of the variable diag_elements.
Assign the matrix "[[3, 2], [2, 3]]" to a variable named "my_matrix".Assign the number "1" to a variable named "t".Compute the condition number of my_matrix and store as result.Check whether the result is smaller than t. If yes, return "True", otherwise return "False".
Assign the matrix "[[3, 2, 5], [2, 3, 5]]" to a variable named "my_matrix".Assign the number "-1" to a variable named "t".Compute the condition number of my_matrix and store as result.Check whether the result is smaller than t. If yes, return "True", otherwise return "False".
Assign the matrix "[[1, 5]]" to a variable named "my_matrix".Assign the number "2" to a variable named "t".Compute the condition number of my_matrix and store as result.Check whether the result is smaller than t. If yes, return "True", otherwise return "False".
Assign the matrix "[[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]" to a variable named "my_matrix".Assign the number "100" to a variable named "t".Compute the condition number of my_matrix and store as result.Check whether the result is smaller than t. If yes, return "True", otherwise return "False".
Assign the matrix "[[5, 5, 5, 5, 5, 0]]" to a variable named "my_matrix".Assign the number "0.5" to a variable named "t".Compute the condition number of my_matrix and store as result.Check whether the result is smaller than t. If yes, return "True", otherwise return "False".
Assign the matrix "[[3, 2], [2, 3]]" to a variable named "a".Assign the matrix "[[3, 2], [2, 3]]" to a variable named "b".Compute the multiplication of two matrices and store as result.Compute the sum of the result and print it out.
Assign the matrix "[[3, 2, 5], [2, 3, 5]]" to a variable named "a".Assign the matrix "[[1, 0], [0, 1], [2, -2]]" to a variable named "b".Compute the multiplication of two matrices and store as result.Compute the sum of the result and print it out.
Assign the matrix "[[1, 5, 67, -1]]" to a variable named "a".Assign the matrix "[[-1], [0], [0], [-1]]" to a variable named "b".Compute the multiplication of two matrices and store as result.Compute the sum of the result and print it out.
Assign the matrix "[[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]" to a variable named "a".Assign the matrix "[[1, 0, 6], [0, 1, 5], [0, 1, 4]]" to a variable named "b".Compute the multiplication of two matrices and store as result.Compute the sum of the result and print it out.
Assign the matrix "[[5, 5, 5, 5, 5, 0]]" to a variable named "a".Assign the matrix "[[-1], [-1], [-1], [-1], [-1], [1000]]" to a variable named "b".Compute the multiplication of two matrices and store as result.Compute the sum of the result and print it out.
Assign the matrix "[[3, 2], [2, 3]]" to a variable named "a".Assign the matrix "[[3, 2], [2, 2]]" to a variable named "b".Implement a function that computes the determinant of a matrix.Check whether the determinant of matrix a is large than matrix b. If yes, print "True", otherwise print "False".
Assign the matrix "[[3, 2, 5], [2, 3, 5], [3, 5, 6]]" to a variable named "a".Assign the matrix "[[3, 2], [2, -3]]" to a variable named "b".Implement a function that computes the determinant of a matrix.Check whether the determinant of matrix a is large than matrix b. If yes, print "True", otherwise print "False".
Assign the matrix "[[1, 5, 67, -1], [2, 3, 6, 7], [2, 3, 6, 7], [2, 3, 6, 7]]" to a variable named "a".Assign the matrix "[[0, 0], [1, 4]]" to a variable named "b".Implement a function that computes the determinant of a matrix.Check whether the determinant of matrix a is large than matrix b. If yes, print "True", otherwise print "False".
Assign the matrix "[[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]" to a variable named "a".Assign the matrix "[[30000, 30000, 30000], [30000, 1, 1], [30000, 30000, 1]]" to a variable named "b".Implement a function that computes the determinant of a matrix.Check whether the determinant of matrix a is large than matrix b. If yes, print "True", otherwise print "False".
Assign the matrix "[[1, 0, 6], [0, 1, 5], [0, 1, 4]]" to a variable named "a".Assign the matrix "[[1, 0], [0, 1]]" to a variable named "b".Implement a function that computes the determinant of a matrix.Check whether the determinant of matrix a is large than matrix b. If yes, print "True", otherwise print "False".
Assign the list of numbesr "[1, 3, 2, 2]" to a variable named "my_numbers".Implement a function that computes the exponential output of a list.Implement a function that computes summation of a list.Implement a function that computes log of a number.Print out the log of sum exponential my_numbers.
Assign the list of numbesr "[1000, 1000, 1000]" to a variable named "my_numbers".Implement a function that computes the exponential output of a list.Implement a function that computes summation of a list.Implement a function that computes log of a number.Print out the log of sum exponential my_numbers.
Assign the list of numbesr "[0, 0.2, 0.4, -0.2]" to a variable named "my_numbers".Implement a function that computes the exponential output of a list.Implement a function that computes summation of a list.Implement a function that computes log of a number.Print out the log of sum exponential my_numbers.
Assign the list of numbesr "[1, 0, 0, 1, 3, 2, 0, 0.2]" to a variable named "my_numbers".Implement a function that computes the exponential output of a list.Implement a function that computes summation of a list.Implement a function that computes log of a number.Print out the log of sum exponential my_numbers.
Assign the list of numbesr "[0, 3, 1, 3, 2, 2, -0.2, 0.2]" to a variable named "my_numbers".Implement a function that computes the exponential output of a list.Implement a function that computes summation of a list.Implement a function that computes log of a number.Print out the log of sum exponential my_numbers.
Assign the list of points "[[1, 3], [2, 2]]" to a variable named "my_points".Assign the integer "1" to a variable named "k".Implement a function that computes the distance between a point and the origin (0,0).Implement a function that computes the k closest points in an array to the origin and store as result.Compute the k closest points in my_points and print them out.
Assign the list of points "[[0, 0], [1, 4], [-4, 6], [7, -1]]" to a variable named "my_points".Assign the integer "1" to a variable named "k".Implement a function that computes the distance between a point and the origin (0,0).Implement a function that computes the k closest points in an array to the origin and store as result.Compute the k closest points in my_points and print them out.
Assign the list of points "[[0, 0], [1, 4], [-4, 6], [7, -1]]" to a variable named "my_points".Assign the integer "2" to a variable named "k".Implement a function that computes the distance between a point and the origin (0,0).Implement a function that computes the k closest points in an array to the origin and store as result.Compute the k closest points in my_points and print them out.
Assign the list of points "[[1, 0], [0, 1], [3, 2], [0, 0.2], [0.4, -0.2]]" to a variable named "my_points".Assign the integer "2" to a variable named "k".Implement a function that computes the distance between a point and the origin (0,0).Implement a function that computes the k closest points in an array to the origin and store as result.Compute the k closest points in my_points and print them out.
Assign the list of points "[[0, 3], [1, 3], [2, 2], [-0.2, 0.2], [0.5, 0.5], [1, -0.5], [2, -0.5], [2, 1]]" to a variable named "my_points".Assign the integer "1" to a variable named "k".Implement a function that computes the distance between a point and the origin (0,0).Implement a function that computes the k closest points in an array to the origin and store as result.Compute the k closest points in my_points and print them out.
Implement a function called LCP() to find the longest common prefix of two stringsInitialize a variable named lst1 with a list ['apple', 'ape', 'april'].Apply the function LCP() recusively to lst1Print the the longest common prefix of the strings in lst1
Implement a function called LCP() to find the longest common prefix of two stringsInitialize a variable named lst1 with a list ['crazy', 'car'].Apply the function LCP() recusively to lst1Print the the longest common prefix of the strings in lst1
Implement a function called LCP() to find the longest common prefix of two stringsInitialize a variable named lst1 with a list ['small', 'smart', 'smile'].Apply the function LCP() recusively to lst1Print the the longest common prefix of the strings in lst1
Implement a function called LCP() to find the longest common prefix of two stringsInitialize a variable named lst1 with a list ['inbox', 'income', 'input', 'insight'].Apply the function LCP() recusively to lst1Print the the longest common prefix of the strings in lst1
Implement a function called LCP() to find the longest common prefix of two stringsInitialize a variable named lst1 with a list ['come', 'combine', 'continue', 'compute'].Apply the function LCP() recusively to lst1Print the the longest common prefix of the strings in lst1
Assigns a list [2, 3, 1, 2, 3] to a variable named lst1Create a frequency table of elements in lst1Find the elements with frequency larger than 1 and assign them to a list lst2Print out lst2
Assigns a list ['a', 'c', 'b', 'a'] to a variable named lst1Create a frequency table of elements in lst1Find the elements with frequency larger than 1 and assign them to a list lst2Print out lst2
Assigns a list [3, 3, 1, 1] to a variable named lst1Create a frequency table of elements in lst1Find the elements with frequency larger than 1 and assign them to a list lst2Print out lst2
Assigns a list ['d', 'c', 'd', 'c', 'e', 'a'] to a variable named lst1Create a frequency table of elements in lst1Find the elements with frequency larger than 1 and assign them to a list lst2Print out lst2
Assigns a list [1, 2, 3] to a variable named lst1Create a frequency table of elements in lst1Find the elements with frequency larger than 1 and assign them to a list lst2Print out lst2
Initialize a variable named w1 with a string 'popular'Get the first non-repeating character in w1Find its corresponding index and assign it to n1Print out n1
Initialize a variable named w1 with a string 'crunchy'Get the first non-repeating character in w1Find its corresponding index and assign it to n1Print out n1
Initialize a variable named w1 with a string 'barbados'Get the first non-repeating character in w1Find its corresponding index and assign it to n1Print out n1
Initialize a variable named w1 with a string 'alphabet'Get the first non-repeating character in w1Find its corresponding index and assign it to n1Print out n1
Initialize a variable named w1 with a string 'science'Get the first non-repeating character in w1Find its corresponding index and assign it to n1Print out n1
Assign a sentence 'Geeks for Geeks' to a variable named sentence1.Assign a sentence 'Learning from Geeks for Geeks' to a variable named sentence2.Split sentence1 into words and assign them to words1.Split sentence2 into words and assign them to words2.Find the words that appear once in both words1 and words2 and assign them to uncommon_words.Print uncommon_words.
Assign a sentence 'apple banana mango' to a variable named sentence1.Assign a sentence 'banana fruits mango' to a variable named sentence2.Split sentence1 into words and assign them to words1.Split sentence2 into words and assign them to words2.Find the words that appear once in both words1 and words2 and assign them to uncommon_words.Print uncommon_words.
Assign a sentence 'Seaborg spent most of his career as an educator and research scientist at the University of California, Berkeley.' to a variable named sentence1.Assign a sentence 'Seaborg spent most of his career as an educator and research scientist at the University of California, Los Angeles.' to a variable named sentence2.Split sentence1 into words and assign them to words1.Split sentence2 into words and assign them to words2.Find the words that appear once in both words1 and words2 and assign them to uncommon_words.Print uncommon_words.
Assign a sentence 'Seaborg was the principal or co-discoverer of ten elements.' to a variable named sentence1.Assign a sentence 'Seaborg was the principal or co-discoverer of ten elements.' to a variable named sentence2.Split sentence1 into words and assign them to words1.Split sentence2 into words and assign them to words2.Find the words that appear once in both words1 and words2 and assign them to uncommon_words.Print uncommon_words.
Assign a sentence 'Heavy rainfall began in earnest around 8 April.' to a variable named sentence1.Assign a sentence 'rainfall began in earnest around 8 April.' to a variable named sentence2.Split sentence1 into words and assign them to words1.Split sentence2 into words and assign them to words2.Find the words that appear once in both words1 and words2 and assign them to uncommon_words.Print uncommon_words.
Assign a sentence 'Hi all, my name is Tom...I am originally from Australia.' to a variable named sentence1.Split sentence1 into words and assign them to words1.Remove punctuation in words1.Compute the average word length in words1 and assign it avg.Print avg.
Assign a sentence 'I need to work very hard to learn more about algorithms in Python!' to a variable named sentence1.Split sentence1 into words and assign them to words1.Remove punctuation in words1.Compute the average word length in words1 and assign it avg.Print avg.
Assign a sentence 'It received critical acclaim and continues to be praised by commentators.' to a variable named sentence1.Split sentence1 into words and assign them to words1.Remove punctuation in words1.Compute the average word length in words1 and assign it avg.Print avg.
Assign a sentence 'The Minute Man was intended to be placed on a local boulder by the town of Concord.' to a variable named sentence1.Split sentence1 into words and assign them to words1.Remove punctuation in words1.Compute the average word length in words1 and assign it avg.Print avg.
Assign a sentence 'During the height of the Cold War, teams from the Soviet Union and the United States independently created rutherfordium and dubnium.' to a variable named sentence1.Split sentence1 into words and assign them to words1.Remove punctuation in words1.Compute the average word length in words1 and assign it avg.Print avg.
Assigns strings find and ding to variables w1 and w2 respectivelyLower-case w1 and w2Count the frequency of letters in w1 and w2 and assign them to f1 and f2Print if f1 is equal to f2
Assigns strings rat and car to variables w1 and w2 respectivelyLower-case w1 and w2Count the frequency of letters in w1 and w2 and assign them to f1 and f2Print if f1 is equal to f2
Assigns strings open and book to variables w1 and w2 respectivelyLower-case w1 and w2Count the frequency of letters in w1 and w2 and assign them to f1 and f2Print if f1 is equal to f2
Assigns strings fried and fired to variables w1 and w2 respectivelyLower-case w1 and w2Count the frequency of letters in w1 and w2 and assign them to f1 and f2Print if f1 is equal to f2
Assigns strings listen and silent to variables w1 and w2 respectivelyLower-case w1 and w2Count the frequency of letters in w1 and w2 and assign them to f1 and f2Print if f1 is equal to f2
Assign a string abc to a variable named w1Concatenate the elements in w1 from end to beginning and assign it to w2Print w2
Assign a string ape to a variable named w1Concatenate the elements in w1 from end to beginning and assign it to w2Print w2
Assign a string geeksforgeeks to a variable named w1Concatenate the elements in w1 from end to beginning and assign it to w2Print w2
Assign a string apple to a variable named w1Concatenate the elements in w1 from end to beginning and assign it to w2Print w2
Assign a string april to a variable named w1Concatenate the elements in w1 from end to beginning and assign it to w2Print w2
Assign a natural number 12 to named numCreate a list from 1 to num and assign it to a variable lst1Compute the sum of squared of the numbers in lst1 and assign n1Compute the sum of the numbers in lst1 and assign its square to n2Print out the difference between n1 and n2
Assign a natural number 2 to named numCreate a list from 1 to num and assign it to a variable lst1Compute the sum of squared of the numbers in lst1 and assign n1Compute the sum of the numbers in lst1 and assign its square to n2Print out the difference between n1 and n2
Assign a natural number 10 to named numCreate a list from 1 to num and assign it to a variable lst1Compute the sum of squared of the numbers in lst1 and assign n1Compute the sum of the numbers in lst1 and assign its square to n2Print out the difference between n1 and n2
Assign a natural number 5 to named numCreate a list from 1 to num and assign it to a variable lst1Compute the sum of squared of the numbers in lst1 and assign n1Compute the sum of the numbers in lst1 and assign its square to n2Print out the difference between n1 and n2
Assign a natural number 100 to named numCreate a list from 1 to num and assign it to a variable lst1Compute the sum of squared of the numbers in lst1 and assign n1Compute the sum of the numbers in lst1 and assign its square to n2Print out the difference between n1 and n2
Assigns a list [0.3, 1.0, 2.0] to a variable named vec1Assigns a list [1.0, 2.0, 3.0] to a variable named vec2Normalize vec1Normalize vec2Compute the dot product of vec1 and vec2Print out the dot product
Assigns a list [10.0, 20.0, 30.0] to a variable named vec1Assigns a list [0.1, 0.2, 0.3] to a variable named vec2Normalize vec1Normalize vec2Compute the dot product of vec1 and vec2Print out the dot product
Assigns a list [1.1, 2.1, 3.1] to a variable named vec1Assigns a list [10.1, 20.2, 30.3] to a variable named vec2Normalize vec1Normalize vec2Compute the dot product of vec1 and vec2Print out the dot product
Assigns a list [1.0, 2.0] to a variable named vec1Assigns a list [0.1, 0.2] to a variable named vec2Normalize vec1Normalize vec2Compute the dot product of vec1 and vec2Print out the dot product
Assigns a list [5.3, 1.1, 2.6, 1.2, 10.2] to a variable named vec1Assigns a list [1.3, 2.5, 3.7, 4.8, 5.9] to a variable named vec2Normalize vec1Normalize vec2Compute the dot product of vec1 and vec2Print out the dot product
Assigns a list [0.0, 0.0, 0.0] to a variable named vec1Assigns a list [1.0, 2.0, 3.0] to a variable named vec2Assigns a list [0.1, 0.2, 0.3] to a variable named vec3Convert vec1, vec2, and vec3 to numpy arrayImplement a function called dist() to compute the distance between two vectorsCompute the distance between vec1 and vec2 and assign it to d1Compute the distance between vec1 and vec3 and assign it to d2Print out whether d1 is larger than d2
Assigns a list [0.0, 0.0, 0.0] to a variable named vec1Assigns a list [10.0, 20.0, 30.0] to a variable named vec2Assigns a list [0.1, 0.2, 0.3] to a variable named vec3Convert vec1, vec2, and vec3 to numpy arrayImplement a function called dist() to compute the distance between two vectorsCompute the distance between vec1 and vec2 and assign it to d1Compute the distance between vec1 and vec3 and assign it to d2Print out whether d1 is larger than d2
Assigns a list [0.0, 0.0, 0.0] to a variable named vec1Assigns a list [1.1, 2.1, 3.1] to a variable named vec2Assigns a list [10.1, 20.2, 30.3] to a variable named vec3Convert vec1, vec2, and vec3 to numpy arrayImplement a function called dist() to compute the distance between two vectorsCompute the distance between vec1 and vec2 and assign it to d1Compute the distance between vec1 and vec3 and assign it to d2Print out whether d1 is larger than d2
Assigns a list [0.0, 0.0, 0.0, 0.0] to a variable named vec1Assigns a list [-1.0, -2.0, -3.0, -10.0] to a variable named vec2Assigns a list [0.1, 0.2, 0.3, 0.2] to a variable named vec3Convert vec1, vec2, and vec3 to numpy arrayImplement a function called dist() to compute the distance between two vectorsCompute the distance between vec1 and vec2 and assign it to d1Compute the distance between vec1 and vec3 and assign it to d2Print out whether d1 is larger than d2
Assigns a list [0.0, 0.0] to a variable named vec1Assigns a list [1.0, 2.0] to a variable named vec2Assigns a list [0.1, 0.2] to a variable named vec3Convert vec1, vec2, and vec3 to numpy arrayImplement a function called dist() to compute the distance between two vectorsCompute the distance between vec1 and vec2 and assign it to d1Compute the distance between vec1 and vec3 and assign it to d2Print out whether d1 is larger than d2
Initialize a variable named lst1 with a list [1, 1, 1, 1, 1].Initialize a variable named lst2 with a list [1, 2, 3, 4, 5].Create a function called std() to compute the standard deviation given a list of numbers.Call the function std() to calculate standard deviations for lst1 and lst2.Print out the smaller standard deviation.
Initialize a variable named lst1 with a list [-1, -1, 1, 1].Initialize a variable named lst2 with a list [100, 1, -100].Create a function called std() to compute the standard deviation given a list of numbers.Call the function std() to calculate standard deviations for lst1 and lst2.Print out the smaller standard deviation.
Initialize a variable named lst1 with a list [-100, -10, 5, 5, -10].Initialize a variable named lst2 with a list [100, 50, 20, -100].Create a function called std() to compute the standard deviation given a list of numbers.Call the function std() to calculate standard deviations for lst1 and lst2.Print out the smaller standard deviation.
Initialize a variable named lst1 with a list [20, 1, 50, 6].Initialize a variable named lst2 with a list [-100].Create a function called std() to compute the standard deviation given a list of numbers.Call the function std() to calculate standard deviations for lst1 and lst2.Print out the smaller standard deviation.
Initialize a variable named lst1 with a list [5, 6, 9, 100].Initialize a variable named lst2 with a list [-100, -100, -100, -100, -100].Create a function called std() to compute the standard deviation given a list of numbers.Call the function std() to calculate standard deviations for lst1 and lst2.Print out the smaller standard deviation.
Initialize a variable named lst1 with a list [1, 1, 1, 1, 1].Initialize a variable named lst2 with a list [1, 2, 3, 4, 5].Create a function called mean() to compute the mean given a list of numbers.Call the function mean() to calculate means for lst1 and lst2.Print out the smaller mean.
Initialize a variable named lst1 with a list [-1, -1, 1, 1].Initialize a variable named lst2 with a list [100, 1, -100].Create a function called mean() to compute the mean given a list of numbers.Call the function mean() to calculate means for lst1 and lst2.Print out the smaller mean.
Initialize a variable named lst1 with a list [-100, -10, 5, 5, -10].Initialize a variable named lst2 with a list [100, 50, 20, -100].Create a function called mean() to compute the mean given a list of numbers.Call the function mean() to calculate means for lst1 and lst2.Print out the smaller mean.
Initialize a variable named lst1 with a list [20, 1, 50, 6].Initialize a variable named lst2 with a list [-100].Create a function called mean() to compute the mean given a list of numbers.Call the function mean() to calculate means for lst1 and lst2.Print out the smaller mean.
Initialize a variable named lst1 with a list [5, 6, 9, 100].Initialize a variable named lst2 with a list [-100, -100, -100, -100, -100].Create a function called mean() to compute the mean given a list of numbers.Call the function mean() to calculate means for lst1 and lst2.Print out the smaller mean.
Initialize a variable named lst1 with a list [1, 1, 1, 1, 1].Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectivelyCompute the coeffeicient of variationPrint out the coefficient of variation
Initialize a variable named lst1 with a list [-100, -10, 5, 5, -10].Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectivelyCompute the coeffeicient of variationPrint out the coefficient of variation
Initialize a variable named lst1 with a list [-1, 1, -10, 10, 2, 3, 5].Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectivelyCompute the coeffeicient of variationPrint out the coefficient of variation
Initialize a variable named lst1 with a list [-5, 7, -3, -4, 9, 10, -1, 11].Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectivelyCompute the coeffeicient of variationPrint out the coefficient of variation
Initialize a variable named lst1 with a list [20, 1, 50, 6].Compute the mean and the standard deviation for lst1 and assign it variable avg and sd, respectivelyCompute the coeffeicient of variationPrint out the coefficient of variation
Initialize a variable named lst1 with a list [0, 0].Get the absolute value of every element in lst1 and assign to a lst2Compute the sum of lst2 and assign to l1Print out l1
Initialize a variable named lst1 with a list [1, 1].Get the absolute value of every element in lst1 and assign to a lst2Compute the sum of lst2 and assign to l1Print out l1
Initialize a variable named lst1 with a list [-1, 1, -100, 100].Get the absolute value of every element in lst1 and assign to a lst2Compute the sum of lst2 and assign to l1Print out l1
Initialize a variable named lst1 with a list [0, 0, 59, 1, 40].Get the absolute value of every element in lst1 and assign to a lst2Compute the sum of lst2 and assign to l1Print out l1
Initialize a variable named lst1 with a list [-50, -10, 40, 200, 1000].Get the absolute value of every element in lst1 and assign to a lst2Compute the sum of lst2 and assign to l1Print out l1
Assigns a list [0.3, 1.0, 2.0, -2.0, 4.0, -5.0] to a variable named lst1Compute the sample mean of lst1Compute the sample standard deviation of lst1Compute the z-statistic to test whether its mean is 0Print out the z-statistic
Assigns a list [1.3, 5.0, 2.1, -2.4, 4.1, 5.1] to a variable named lst1Compute the sample mean of lst1Compute the sample standard deviation of lst1Compute the z-statistic to test whether its mean is 0Print out the z-statistic
Assigns a list [1.3, 15.0, 2.9] to a variable named lst1Compute the sample mean of lst1Compute the sample standard deviation of lst1Compute the z-statistic to test whether its mean is 0Print out the z-statistic
Assigns a list [0.3, -1.0, -2.0, 5.0, 1.0, 5.1] to a variable named lst1Compute the sample mean of lst1Compute the sample standard deviation of lst1Compute the z-statistic to test whether its mean is 0Print out the z-statistic
Assigns a list [10.3, 12.0, 20.0, 21.0, 40.0, 5.0, 10.0, 20.0, 23.0, 15.0] to a variable named lst1Compute the sample mean of lst1Compute the sample standard deviation of lst1Compute the z-statistic to test whether its mean is 0Print out the z-statistic
Assign a list [3, -3, 2, -2] to named lst1Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectivelyConcatenate lst_pos and lst_neg and assign it lst2Print out lst2
Assign a list [-5, 7, -3, -4, 9, 10, -1, 11] to named lst1Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectivelyConcatenate lst_pos and lst_neg and assign it lst2Print out lst2
Assign a list [-1000, 11] to named lst1Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectivelyConcatenate lst_pos and lst_neg and assign it lst2Print out lst2
Assign a list [9, -10, 8, 2, -77, -50, 11, 6] to named lst1Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectivelyConcatenate lst_pos and lst_neg and assign it lst2Print out lst2
Assign a list [-50, -70, -30, 4, 3, -100, 1] to named lst1Separate lst1 into two lists, lst_pos and lst_neg which contain all the positive numbers and all the negative numbers repsectivelyConcatenate lst_pos and lst_neg and assign it lst2Print out lst2
Initialize a variable named w with a string 2a4BLower every character in wReplace every alphabetical characters in w with ''Print out the new word after substitution
Initialize a variable named w with a string br2aceLower every character in wReplace every alphabetical characters in w with ''Print out the new word after substitution
Initialize a variable named w with a string 100Lower every character in wReplace every alphabetical characters in w with ''Print out the new word after substitution
Initialize a variable named w with a string 3g4lcLower every character in wReplace every alphabetical characters in w with ''Print out the new word after substitution
Initialize a variable named w with a string 12Apple0Lower every character in wReplace every alphabetical characters in w with ''Print out the new word after substitution
Import and initialize a numpy array "X" with the values [[0.884, 0.209], [0.067, 0.381], [0.503, 0.821], [0.306, 0.592], [0.417, 0.519]].Calculate the dot product between all rows and store the result to "Xn", where (i, j) element stores the dot product between i-th and j-th  row of "X".Set the diagonal elements of "Xn" to 0.Print out the maximum value (cast as a float) in "Xn".
Import and initialize a numpy array "X" with the values [[2, 2], [1, 0], [0, 4], [2, 4], [1, 1], [0, 3], [1, 0], [1, 0], [1, 3], [0, 1]].Calculate the dot product between all rows and store the result to "Xn", where (i, j) element stores the dot product between i-th and j-th  row of "X".Set the diagonal elements of "Xn" to 0.Print out the maximum value (cast as a float) in "Xn".
Import and initialize a numpy array "X" with the values [[1, 0, 3], [4, 3, 4], [4, 1, 2], [0, 1, 0], [3, 3, 2]].Calculate the dot product between all rows and store the result to "Xn", where (i, j) element stores the dot product between i-th and j-th  row of "X".Set the diagonal elements of "Xn" to 0.Print out the maximum value (cast as a float) in "Xn".
Import and initialize a numpy array "X" with the values [[1.022, -0.668], [-1.082, 0.063], [-0.181, 0.841], [0.891, 1.533], [1.195, -1.69]].Calculate the dot product between all rows and store the result to "Xn", where (i, j) element stores the dot product between i-th and j-th  row of "X".Set the diagonal elements of "Xn" to 0.Print out the maximum value (cast as a float) in "Xn".
Import and initialize a numpy array "X" with the values [[-8, 2, -3], [2, -10, -5], [-5, 5, -8], [-3, 2, -2], [3, 6, 2]].Calculate the dot product between all rows and store the result to "Xn", where (i, j) element stores the dot product between i-th and j-th  row of "X".Set the diagonal elements of "Xn" to 0.Print out the maximum value (cast as a float) in "Xn".
Initialize numpy arrays "pred" with the values [1, 1, 1, 1, 1, 0, 1, 0, 0, 0], "y" with the values [0, 1, 1, 0, 1, 0, 0, 0, 0, 1].Compare the equivalence of two arrays and store the results as "match".Assign the boolean array for whether "y" is greater than 0 to a variable "non_zero".Perform the logical "AND" operation between "match" and "non_zero", store the result as "correct".Compute the precision by dividing the number of True values in "correct" by that in "pred", and store as "prec".Compute the recall by dividing the number of True values in "correct" by the number of actual non-zero values in "y", and store the result as "rec".Calculate the harmonic mean between "prec" and "rec" and print out the value.
Initialize numpy arrays "pred" with the values [0, 1, 1, 1, 1, 0, 1, 0, 0, 0], "y" with the values [0, 1, 1, 0, 1, 0, 0, 0, 0, 0].Compare the equivalence of two arrays and store the results as "match".Assign the boolean array for whether "y" is greater than 0 to a variable "non_zero".Perform the logical "AND" operation between "match" and "non_zero", store the result as "correct".Compute the precision by dividing the number of True values in "correct" by that in "pred", and store as "prec".Compute the recall by dividing the number of True values in "correct" by the number of actual non-zero values in "y", and store the result as "rec".Calculate the harmonic mean between "prec" and "rec" and print out the value.
Initialize numpy arrays "pred" with the values [0, 1, 0, 0, 0], "y" with the values [0, 1, 0, 0, 0].Compare the equivalence of two arrays and store the results as "match".Assign the boolean array for whether "y" is greater than 0 to a variable "non_zero".Perform the logical "AND" operation between "match" and "non_zero", store the result as "correct".Compute the precision by dividing the number of True values in "correct" by that in "pred", and store as "prec".Compute the recall by dividing the number of True values in "correct" by the number of actual non-zero values in "y", and store the result as "rec".Calculate the harmonic mean between "prec" and "rec" and print out the value.
Initialize numpy arrays "pred" with the values [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "y" with the values [0, 0, 0, 0, 0, 1, 0, 0, 0, 0].Compare the equivalence of two arrays and store the results as "match".Assign the boolean array for whether "y" is greater than 0 to a variable "non_zero".Perform the logical "AND" operation between "match" and "non_zero", store the result as "correct".Compute the precision by dividing the number of True values in "correct" by that in "pred", and store as "prec".Compute the recall by dividing the number of True values in "correct" by the number of actual non-zero values in "y", and store the result as "rec".Calculate the harmonic mean between "prec" and "rec" and print out the value.
Initialize numpy arrays "pred" with the values [0, 1, 0, 0, 0], "y" with the values [0, 1, 1, 1, 1].Compare the equivalence of two arrays and store the results as "match".Assign the boolean array for whether "y" is greater than 0 to a variable "non_zero".Perform the logical "AND" operation between "match" and "non_zero", store the result as "correct".Compute the precision by dividing the number of True values in "correct" by that in "pred", and store as "prec".Compute the recall by dividing the number of True values in "correct" by the number of actual non-zero values in "y", and store the result as "rec".Calculate the harmonic mean between "prec" and "rec" and print out the value.
Initialize a string named "concat" with ACapitalLetterWords.Import the regex module and define a pattern "pat" that matches capital alphabets that can be referenced as a group.Find all the matches in "concat" with "pat", and insert an additional whitespace before the matched character with, then store the result to "result".Print out "result".
Initialize a string named "concat" with camelCaseMethod.Import the regex module and define a pattern "pat" that matches capital alphabets that can be referenced as a group.Find all the matches in "concat" with "pat", and insert an additional whitespace before the matched character with, then store the result to "result".Print out "result".
Initialize a string named "concat" with ABCDE.Import the regex module and define a pattern "pat" that matches capital alphabets that can be referenced as a group.Find all the matches in "concat" with "pat", and insert an additional whitespace before the matched character with, then store the result to "result".Print out "result".
Initialize a string named "concat" with splitDB.Import the regex module and define a pattern "pat" that matches capital alphabets that can be referenced as a group.Find all the matches in "concat" with "pat", and insert an additional whitespace before the matched character with, then store the result to "result".Print out "result".
Initialize a string named "concat" with donotsplitanything.Import the regex module and define a pattern "pat" that matches capital alphabets that can be referenced as a group.Find all the matches in "concat" with "pat", and insert an additional whitespace before the matched character with, then store the result to "result".Print out "result".
Initialize a list "x" with the values [0, 0, 0, 0, 100].Assuming the normal distribution, calculate mean and standard deviation of "x" using numpy, store the results to "mean" and "std".Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to "results".Sort "results" in ascending order and print it out.
Initialize a list "x" with the values [-100, 0, 1, 2, 3, 4, -1, -2, -10, 45, 120].Assuming the normal distribution, calculate mean and standard deviation of "x" using numpy, store the results to "mean" and "std".Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to "results".Sort "results" in ascending order and print it out.
Initialize a list "x" with the values [3, -1, 0, 3, -3, 5, -2, 0, 0, -3, 1, -4, 4, -7, -1, -1, 1, -1, -2, -3].Assuming the normal distribution, calculate mean and standard deviation of "x" using numpy, store the results to "mean" and "std".Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to "results".Sort "results" in ascending order and print it out.
Initialize a list "x" with the values [0, 0, 4, 0, 3, 0, 0, -7, -2, 1, 1, -1, -7, -3, 1, 2, 0, -1, 4, 4].Assuming the normal distribution, calculate mean and standard deviation of "x" using numpy, store the results to "mean" and "std".Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to "results".Sort "results" in ascending order and print it out.
Initialize a list "x" with the values [4, -2, -2, -2, 0, 2, 3, -3, -3, 4, 1, 0, 2, 1, 4, -2, 2, -5, -4, 3, 0, 0, -2, -1, -1, 0, -2, 1, 1, -3].Assuming the normal distribution, calculate mean and standard deviation of "x" using numpy, store the results to "mean" and "std".Find the values in x that are either smaller than mean - 2 * std or larger than mean + 2 * std, and store the results to "results".Sort "results" in ascending order and print it out.
Initialize a list "x" with the values [4, 2, 3, 1, 0, 3, 3, 3, 2, 1]Obtain a list of unique elements in x and sort them, store the results to "vocab".Create a hash map from the values of "vocab" to their indices and store the result to "v2i".Initialize a numpy array of zeros named "features" whose row size is the length of x and column size is the length of "index", with a data type of int.For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using "v2i".Print out "features".
Initialize a list "x" with the values [0, 1, 2]Obtain a list of unique elements in x and sort them, store the results to "vocab".Create a hash map from the values of "vocab" to their indices and store the result to "v2i".Initialize a numpy array of zeros named "features" whose row size is the length of x and column size is the length of "index", with a data type of int.For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using "v2i".Print out "features".
Initialize a list "x" with the values [1, 1, 1, 1, 1]Obtain a list of unique elements in x and sort them, store the results to "vocab".Create a hash map from the values of "vocab" to their indices and store the result to "v2i".Initialize a numpy array of zeros named "features" whose row size is the length of x and column size is the length of "index", with a data type of int.For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using "v2i".Print out "features".
Initialize a list "x" with the values [0, 0, 0, 0, 0]Obtain a list of unique elements in x and sort them, store the results to "vocab".Create a hash map from the values of "vocab" to their indices and store the result to "v2i".Initialize a numpy array of zeros named "features" whose row size is the length of x and column size is the length of "index", with a data type of int.For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using "v2i".Print out "features".
Initialize a list "x" with the values [0, 0, 1, 1]Obtain a list of unique elements in x and sort them, store the results to "vocab".Create a hash map from the values of "vocab" to their indices and store the result to "v2i".Initialize a numpy array of zeros named "features" whose row size is the length of x and column size is the length of "index", with a data type of int.For each element in x, assign 1 to (i, j) location of features, where i is the index of current element and j is the mapped value of the current element using "v2i".Print out "features".
Initialize a variable "x" with ['a', 'b', 'c'].Apply the function "len" to each element in the list and store the results to "mapped".Convert each element in "mapped" into string.Define "results" with a dictionary whose keys are the unique values in "mapped" and values are empty lists.Looping over the zip of "mapped" and "x", append the value in "x" to the value of "results" using the value in "mapped" as the key.Print out the "results".
Initialize a variable "x" with ['apple', 'banana', 'orange', 'peach'].Apply the function "len" to each element in the list and store the results to "mapped".Convert each element in "mapped" into string.Define "results" with a dictionary whose keys are the unique values in "mapped" and values are empty lists.Looping over the zip of "mapped" and "x", append the value in "x" to the value of "results" using the value in "mapped" as the key.Print out the "results".
Initialize a variable "x" with [1, 2, 3, 'a', 'b', 'c'].Apply the function "type" to each element in the list and store the results to "mapped".Convert each element in "mapped" into string.Define "results" with a dictionary whose keys are the unique values in "mapped" and values are empty lists.Looping over the zip of "mapped" and "x", append the value in "x" to the value of "results" using the value in "mapped" as the key.Print out the "results".
Initialize a variable "x" with [[1, 2, 3], 'a', 'b', 'c'].Apply the function "len" to each element in the list and store the results to "mapped".Convert each element in "mapped" into string.Define "results" with a dictionary whose keys are the unique values in "mapped" and values are empty lists.Looping over the zip of "mapped" and "x", append the value in "x" to the value of "results" using the value in "mapped" as the key.Print out the "results".
Initialize a variable "x" with [1, 2, 3, '1', '2', '3'].Apply the function "str" to each element in the list and store the results to "mapped".Convert each element in "mapped" into string.Define "results" with a dictionary whose keys are the unique values in "mapped" and values are empty lists.Looping over the zip of "mapped" and "x", append the value in "x" to the value of "results" using the value in "mapped" as the key.Print out the "results".
Initialize a variable "best" with -1, "array" with [1, 2, 3, 4, 5]Assign the first element of "array" to a variable named "minimum".In a for loop over "array" starting from the second element, do 1) update "best" when the element minus "minimum" is larger than "best", and 2) update "minimum" with the value of element if it is smaller than "minimum".Print out "best".
Initialize a variable "best" with -1, "array" with [5, 2, 3, 4, 0]Assign the first element of "array" to a variable named "minimum".In a for loop over "array" starting from the second element, do 1) update "best" when the element minus "minimum" is larger than "best", and 2) update "minimum" with the value of element if it is smaller than "minimum".Print out "best".
Initialize a variable "best" with -1, "array" with [12, 7, 8, 5, 9, 5, 14, 9, 8, 9]Assign the first element of "array" to a variable named "minimum".In a for loop over "array" starting from the second element, do 1) update "best" when the element minus "minimum" is larger than "best", and 2) update "minimum" with the value of element if it is smaller than "minimum".Print out "best".
Initialize a variable "best" with -1, "array" with [1, 10, 1, 10, 0]Assign the first element of "array" to a variable named "minimum".In a for loop over "array" starting from the second element, do 1) update "best" when the element minus "minimum" is larger than "best", and 2) update "minimum" with the value of element if it is smaller than "minimum".Print out "best".
Initialize a variable "best" with -1, "array" with [1, 2, 3, 2, 1]Assign the first element of "array" to a variable named "minimum".In a for loop over "array" starting from the second element, do 1) update "best" when the element minus "minimum" is larger than "best", and 2) update "minimum" with the value of element if it is smaller than "minimum".Print out "best".
Initialize a variable "target" with 1, a variable "nums" with [1, 2, 1, 2, 1], and "result" with an empty list.Enumerating over "nums", compare each element with "target" and add its index position  to " result" if they are equivalent.Print out the sum of elements in "result".
Initialize a variable "target" with 1, a variable "nums" with [0, 0, 0], and "result" with an empty list.Enumerating over "nums", compare each element with "target" and add its index position  to " result" if they are equivalent.Print out the sum of elements in "result".
Initialize a variable "target" with 1, a variable "nums" with [1.1, 2, 3, 2, 1], and "result" with an empty list.Enumerating over "nums", compare each element with "target" and add its index position  to " result" if they are equivalent.Print out the sum of elements in "result".
Initialize a variable "target" with 1, a variable "nums" with [1, 2, 3, 2, 1], and "result" with an empty list.Enumerating over "nums", compare each element with "target" and add its index position  to " result" if they are equivalent.Print out the sum of elements in "result".
Initialize a variable "target" with 1, a variable "nums" with [1, '1', 2, '1'], and "result" with an empty list.Enumerating over "nums", compare each element with "target" and add its index position  to " result" if they are equivalent.Print out the sum of elements in "result".
Initialize a variable "nums" with [1, 3, 4] and a variable "N" with 4.Initialize a variable "all_nums" which is a set of numbers between 1 and N.Subtract the set of numbers in "nums" from "all_nums", and store the result to "diff"Pop the only element in "diff" print it out.
Initialize a variable "nums" with [1, 2, 3, 4] and a variable "N" with 5.Initialize a variable "all_nums" which is a set of numbers between 1 and N.Subtract the set of numbers in "nums" from "all_nums", and store the result to "diff"Pop the only element in "diff" print it out.
Initialize a variable "nums" with [4, 3, 9, 7, 8, 5, 2, 1, 10] and a variable "N" with 10.Initialize a variable "all_nums" which is a set of numbers between 1 and N.Subtract the set of numbers in "nums" from "all_nums", and store the result to "diff"Pop the only element in "diff" print it out.
Initialize a variable "nums" with [6, 15, 13, 2, 14, 17, 7, 16, 11, 9, 3, 10, 8, 5, 12, 1, 20, 4, 19] and a variable "N" with 20.Initialize a variable "all_nums" which is a set of numbers between 1 and N.Subtract the set of numbers in "nums" from "all_nums", and store the result to "diff"Pop the only element in "diff" print it out.
Initialize a variable "nums" with [] and a variable "N" with 1.Initialize a variable "all_nums" which is a set of numbers between 1 and N.Subtract the set of numbers in "nums" from "all_nums", and store the result to "diff"Pop the only element in "diff" print it out.
Assign [[1, 2, 3, 4, 5], [0, 1, 3, 5, 7], [0, 2, 3, 4, 5]] to a variable named "X".Initialize a variable named "common" with a set of unique elements in the first index of "X".Iterating over "X", update "common" with an intersection of "common" and the set of unique elements in the current index of "X"Cast "common" as a list and print it out.
Assign [[1, 1], [1, 1]] to a variable named "X".Initialize a variable named "common" with a set of unique elements in the first index of "X".Iterating over "X", update "common" with an intersection of "common" and the set of unique elements in the current index of "X"Cast "common" as a list and print it out.
Assign [[1, 2, 3], [2, 3, 4], [3, 4, 5]] to a variable named "X".Initialize a variable named "common" with a set of unique elements in the first index of "X".Iterating over "X", update "common" with an intersection of "common" and the set of unique elements in the current index of "X"Cast "common" as a list and print it out.
Assign [[1, 12, 56, 21, 5], [21, 2, 6, 11, 7], [5, 7, 13, 8, 21], [5, 21, -5, 6, 8]] to a variable named "X".Initialize a variable named "common" with a set of unique elements in the first index of "X".Iterating over "X", update "common" with an intersection of "common" and the set of unique elements in the current index of "X"Cast "common" as a list and print it out.
Assign [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]] to a variable named "X".Initialize a variable named "common" with a set of unique elements in the first index of "X".Iterating over "X", update "common" with an intersection of "common" and the set of unique elements in the current index of "X"Cast "common" as a list and print it out.
Initialize a variable "start" with 1, and "seq" with a list containing 1.While the value is not 1, perform the following: if "start" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to "start" as well as appending to "seq".Store the sum of all numbers in "seq" to "results".Print out the "results".
Initialize a variable "start" with 9, and "seq" with a list containing 9.While the value is not 1, perform the following: if "start" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to "start" as well as appending to "seq".Store the sum of all numbers in "seq" to "results".Print out the "results".
Initialize a variable "start" with 27, and "seq" with a list containing 27.While the value is not 1, perform the following: if "start" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to "start" as well as appending to "seq".Store the sum of all numbers in "seq" to "results".Print out the "results".
Initialize a variable "start" with 28, and "seq" with a list containing 28.While the value is not 1, perform the following: if "start" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to "start" as well as appending to "seq".Store the sum of all numbers in "seq" to "results".Print out the "results".
Initialize a variable "start" with 123456789, and "seq" with a list containing 123456789.While the value is not 1, perform the following: if "start" is an even number, divide by 2, otherwise multiply by 3 and add 1, then store the number to "start" as well as appending to "seq".Store the sum of all numbers in "seq" to "results".Print out the "results".
Define a variable "pos" with "A", "swap" with ['AB', 'BC', 'CA', 'BC', 'AC'].Write a function "move" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.For each element in "swap", if it contains "pos", call "move" on "pos" and the current element and store the result to "pos".Print out "pos".
Define a variable "pos" with "B", "swap" with ['AC', 'CA'].Write a function "move" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.For each element in "swap", if it contains "pos", call "move" on "pos" and the current element and store the result to "pos".Print out "pos".
Define a variable "pos" with "C", "swap" with ['AB', 'BC', 'CA', 'BC', 'AC', 'AB', 'CA', 'BC', 'AC', 'BA'].Write a function "move" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.For each element in "swap", if it contains "pos", call "move" on "pos" and the current element and store the result to "pos".Print out "pos".
Define a variable "pos" with "C", "swap" with ['AB', 'AC'].Write a function "move" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.For each element in "swap", if it contains "pos", call "move" on "pos" and the current element and store the result to "pos".Print out "pos".
Define a variable "pos" with "A", "swap" with [].Write a function "move" that takes two strings x and y as input, and replace any appearance of x in y with an empty string, then return y.For each element in "swap", if it contains "pos", call "move" on "pos" and the current element and store the result to "pos".Print out "pos".
Initialize a variable "stack" with an empty list, and "num" with 123 as a string.For each chracter in "num", append the character to "stack".Assign an empty string to a variable "result", and concatenate characters popped from the last element of "stack" to "result" until "stack" is empty.Cast "result" as integer and print it out.
Initialize a variable "stack" with an empty list, and "num" with 123456789 as a string.For each chracter in "num", append the character to "stack".Assign an empty string to a variable "result", and concatenate characters popped from the last element of "stack" to "result" until "stack" is empty.Cast "result" as integer and print it out.
Initialize a variable "stack" with an empty list, and "num" with 100 as a string.For each chracter in "num", append the character to "stack".Assign an empty string to a variable "result", and concatenate characters popped from the last element of "stack" to "result" until "stack" is empty.Cast "result" as integer and print it out.
Initialize a variable "stack" with an empty list, and "num" with 0 as a string.For each chracter in "num", append the character to "stack".Assign an empty string to a variable "result", and concatenate characters popped from the last element of "stack" to "result" until "stack" is empty.Cast "result" as integer and print it out.
Initialize a variable "stack" with an empty list, and "num" with 1230 as a string.For each chracter in "num", append the character to "stack".Assign an empty string to a variable "result", and concatenate characters popped from the last element of "stack" to "result" until "stack" is empty.Cast "result" as integer and print it out.
Assign ['<<', '>>>'] to a variable "arrows", then concatenate all the strings in "arrows" and store the result to "joined_arrow".Count the numbers of left-facing arrow and right-facing arrow and store the results to "left" and "right", respectively.If "right" is larger than "left", print out the string that consists of (right - left) right-facing arrows.Otherwise, print out the string that consists of (left - right) left-facing arrows.
Assign ['<<<', '>>'] to a variable "arrows", then concatenate all the strings in "arrows" and store the result to "joined_arrow".Count the numbers of left-facing arrow and right-facing arrow and store the results to "left" and "right", respectively.If "right" is larger than "left", print out the string that consists of (right - left) right-facing arrows.Otherwise, print out the string that consists of (left - right) left-facing arrows.
Assign ['<<', '>>', '<<', '>>>', '>>>'] to a variable "arrows", then concatenate all the strings in "arrows" and store the result to "joined_arrow".Count the numbers of left-facing arrow and right-facing arrow and store the results to "left" and "right", respectively.If "right" is larger than "left", print out the string that consists of (right - left) right-facing arrows.Otherwise, print out the string that consists of (left - right) left-facing arrows.
Assign ['<<', '>>'] to a variable "arrows", then concatenate all the strings in "arrows" and store the result to "joined_arrow".Count the numbers of left-facing arrow and right-facing arrow and store the results to "left" and "right", respectively.If "right" is larger than "left", print out the string that consists of (right - left) right-facing arrows.Otherwise, print out the string that consists of (left - right) left-facing arrows.
Assign ['<<<<<<<<<<<<', '>'] to a variable "arrows", then concatenate all the strings in "arrows" and store the result to "joined_arrow".Count the numbers of left-facing arrow and right-facing arrow and store the results to "left" and "right", respectively.If "right" is larger than "left", print out the string that consists of (right - left) right-facing arrows.Otherwise, print out the string that consists of (left - right) left-facing arrows.
Initialize an array "array" with [1, 2, 3, 4, 5, 6, 8].Calculate the difference of maximum and minimum values in "array" and store the value to "diff".Check if "diff" is included in "array" and store the boolean value to "result".Print out "result"
Initialize an array "array" with [1, 7, 8].Calculate the difference of maximum and minimum values in "array" and store the value to "diff".Check if "diff" is included in "array" and store the boolean value to "result".Print out "result"
Initialize an array "array" with [10].Calculate the difference of maximum and minimum values in "array" and store the value to "diff".Check if "diff" is included in "array" and store the boolean value to "result".Print out "result"
Initialize an array "array" with [0, 1].Calculate the difference of maximum and minimum values in "array" and store the value to "diff".Check if "diff" is included in "array" and store the boolean value to "result".Print out "result"
Initialize an array "array" with [1000, 2, 3, 4, 5, 6, 1000000].Calculate the difference of maximum and minimum values in "array" and store the value to "diff".Check if "diff" is included in "array" and store the boolean value to "result".Print out "result"
Initialize a variable "original" with "aabbddcc"Import OrderedDict from collections module, then initalize a variable "dic" with an OrderedDict with letters in "original" as keys and 0 as the value for each key.Iterating over each character in "original", increment the value in "dic" whose key is the character.Initialize an empty string to a variable "result", then iterate over items in "dic" and append the key and the value as strings to "result".Print out "result".
Initialize a variable "original" with "abc"Import OrderedDict from collections module, then initalize a variable "dic" with an OrderedDict with letters in "original" as keys and 0 as the value for each key.Iterating over each character in "original", increment the value in "dic" whose key is the character.Initialize an empty string to a variable "result", then iterate over items in "dic" and append the key and the value as strings to "result".Print out "result".
Initialize a variable "original" with "zzzzzyyyyyxxxxxa"Import OrderedDict from collections module, then initalize a variable "dic" with an OrderedDict with letters in "original" as keys and 0 as the value for each key.Iterating over each character in "original", increment the value in "dic" whose key is the character.Initialize an empty string to a variable "result", then iterate over items in "dic" and append the key and the value as strings to "result".Print out "result".
Initialize a variable "original" with "aaa"Import OrderedDict from collections module, then initalize a variable "dic" with an OrderedDict with letters in "original" as keys and 0 as the value for each key.Iterating over each character in "original", increment the value in "dic" whose key is the character.Initialize an empty string to a variable "result", then iterate over items in "dic" and append the key and the value as strings to "result".Print out "result".
Initialize a variable "original" with ""Import OrderedDict from collections module, then initalize a variable "dic" with an OrderedDict with letters in "original" as keys and 0 as the value for each key.Iterating over each character in "original", increment the value in "dic" whose key is the character.Initialize an empty string to a variable "result", then iterate over items in "dic" and append the key and the value as strings to "result".Print out "result".
Import re and define a regular expression that matches an email address.Search for an email address in "abc@example.com." and store the first match to a variable "address".Remove the substring starting from the @ symbol from "address".Replace non-alphabetical symbols with a whitespace in "address".Print out "address".
Import re and define a regular expression that matches an email address.Search for an email address in "a.b.c@example.com test." and store the first match to a variable "address".Remove the substring starting from the @ symbol from "address".Replace non-alphabetical symbols with a whitespace in "address".Print out "address".
Import re and define a regular expression that matches an email address.Search for an email address in "a1b2c3.d4e_f6@example.com." and store the first match to a variable "address".Remove the substring starting from the @ symbol from "address".Replace non-alphabetical symbols with a whitespace in "address".Print out "address".
Import re and define a regular expression that matches an email address.Search for an email address in "abc@example.com test. def@abc.def." and store the first match to a variable "address".Remove the substring starting from the @ symbol from "address".Replace non-alphabetical symbols with a whitespace in "address".Print out "address".
Import re and define a regular expression that matches an email address.Search for an email address in "example@@example.com test, example_email@abc.io ." and store the first match to a variable "address".Remove the substring starting from the @ symbol from "address".Replace non-alphabetical symbols with a whitespace in "address".Print out "address".
Assign the list of numbers "[1, 3, 2, 2]" to a variable named "my_numbers".Implement a function that returns the distinct elements of a list.Compute the distinct elements of my_numbers and store as unique_list.Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.
Assign the list of numbers "[1000, 1000, 1000]" to a variable named "my_numbers".Implement a function that returns the distinct elements of a list.Compute the distinct elements of my_numbers and store as unique_list.Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.
Assign the list of numbers "[0, 0.2, 0.4, -0.2]" to a variable named "my_numbers".Implement a function that returns the distinct elements of a list.Compute the distinct elements of my_numbers and store as unique_list.Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.
Assign the list of numbers "[3, 3, 3, 2, 2, 1]" to a variable named "my_numbers".Implement a function that returns the distinct elements of a list.Compute the distinct elements of my_numbers and store as unique_list.Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.
Assign the list of numbers "[0, 3, 1, 3, 2, 2, -0.2, 0.2]" to a variable named "my_numbers".Implement a function that returns the distinct elements of a list.Compute the distinct elements of my_numbers and store as unique_list.Print out the second largest element in unique_list. If the second largest does not exit, print out the maximum.
Assign the list of numbers "[1, 3, 2, 2]" to a variable named "my_numbers".Implement a function that returns the prefix sum of a list as an array.Compute the prefix sum of my_numbers and store as prefix_sum_list.Print out the largest element in prefix_sum_list. 
Assign the list of numbers "[3, -3, -3]" to a variable named "my_numbers".Implement a function that returns the prefix sum of a list as an array.Compute the prefix sum of my_numbers and store as prefix_sum_list.Print out the largest element in prefix_sum_list. 
Assign the list of numbers "[0, 0.2, 0.4, -0.2]" to a variable named "my_numbers".Implement a function that returns the prefix sum of a list as an array.Compute the prefix sum of my_numbers and store as prefix_sum_list.Print out the largest element in prefix_sum_list. 
Assign the list of numbers "[3, 3, 3, -2, 2, 1]" to a variable named "my_numbers".Implement a function that returns the prefix sum of a list as an array.Compute the prefix sum of my_numbers and store as prefix_sum_list.Print out the largest element in prefix_sum_list. 
Assign the list of numbers "[-0.2, 5, -0.2]" to a variable named "my_numbers".Implement a function that returns the prefix sum of a list as an array.Compute the prefix sum of my_numbers and store as prefix_sum_list.Print out the largest element in prefix_sum_list. 
Assign the list of numbers "[1, 3, 2, 2]" to a variable named "my_numbers".Count the distances from each element in my_number to 0. .Find the closest number to 0 in my_number and store as closest_number.Print out the distance from closest_number to 0. 
Assign the list of numbers "[3, -3, -3]" to a variable named "my_numbers".Count the distances from each element in my_number to 0. .Find the closest number to 0 in my_number and store as closest_number.Print out the distance from closest_number to 0. 
Assign the list of numbers "[0, 0.2, 0.4, -0.2]" to a variable named "my_numbers".Count the distances from each element in my_number to 0. .Find the closest number to 0 in my_number and store as closest_number.Print out the distance from closest_number to 0. 
Assign the list of numbers "[3, 3, 3, -2, 2, 1]" to a variable named "my_numbers".Count the distances from each element in my_number to 0. .Find the closest number to 0 in my_number and store as closest_number.Print out the distance from closest_number to 0. 
Assign the list of numbers "[-0.2, 5, -0.2]" to a variable named "my_numbers".Count the distances from each element in my_number to 0. .Find the closest number to 0 in my_number and store as closest_number.Print out the distance from closest_number to 0. 
Assign the string "acc" to a variable named "my_string".Implement a function that checks whether a string only contains unique characters.Find the longest substring of my_string that contains only unique characters and store as result_substring.Print out the length of result_substring.
Assign the string "accccccccccccccccccccc" to a variable named "my_string".Implement a function that checks whether a string only contains unique characters.Find the longest substring of my_string that contains only unique characters and store as result_substring.Print out the length of result_substring.
Assign the string "abcdef" to a variable named "my_string".Implement a function that checks whether a string only contains unique characters.Find the longest substring of my_string that contains only unique characters and store as result_substring.Print out the length of result_substring.
Assign the string "acdeffce" to a variable named "my_string".Implement a function that checks whether a string only contains unique characters.Find the longest substring of my_string that contains only unique characters and store as result_substring.Print out the length of result_substring.
Assign the string "aaaaaaaaaaaaa" to a variable named "my_string".Implement a function that checks whether a string only contains unique characters.Find the longest substring of my_string that contains only unique characters and store as result_substring.Print out the length of result_substring.
Assign a string "abadb" to a variable named "my_string".Find the repeated characters in the my_string.Count the frequency of these repeated characters.Print out the length of most frequent character.
Assign a string "aaaaaaaa" to a variable named "my_string".Find the repeated characters in the my_string.Count the frequency of these repeated characters.Print out the length of most frequent character.
Assign a string "caaaaaaaaaaaa" to a variable named "my_string".Find the repeated characters in the my_string.Count the frequency of these repeated characters.Print out the length of most frequent character.
Assign a string "cccccaaaaa" to a variable named "my_string".Find the repeated characters in the my_string.Count the frequency of these repeated characters.Print out the length of most frequent character.
Assign a string "abcde" to a variable named "my_string".Find the repeated characters in the my_string.Count the frequency of these repeated characters.Print out the length of most frequent character.
Assign a string "a" to a variable named "my_string".Implement a function that checks whether a string is a palindrome.Find all substrings of my_string which is a palindrome and store as a list.Print out the length of longest palindrome in the above list.
Assign a string "abcba" to a variable named "my_string".Implement a function that checks whether a string is a palindrome.Find all substrings of my_string which is a palindrome and store as a list.Print out the length of longest palindrome in the above list.
Assign a string "caaa" to a variable named "my_string".Implement a function that checks whether a string is a palindrome.Find all substrings of my_string which is a palindrome and store as a list.Print out the length of longest palindrome in the above list.
Assign a string "cccccaaaaa" to a variable named "my_string".Implement a function that checks whether a string is a palindrome.Find all substrings of my_string which is a palindrome and store as a list.Print out the length of longest palindrome in the above list.
Assign a string "abcde" to a variable named "my_string".Implement a function that checks whether a string is a palindrome.Find all substrings of my_string which is a palindrome and store as a list.Print out the length of longest palindrome in the above list.
Assign an integer "10" to a variable named "my_integer".Implement a function that checks whether an integer is a prime number.Find all prime numbers that are less than my_integer and store as prime_result.Print out the length of prime_result.
Assign an integer "0" to a variable named "my_integer".Implement a function that checks whether an integer is a prime number.Find all prime numbers that are less than my_integer and store as prime_result.Print out the length of prime_result.
Assign an integer "1" to a variable named "my_integer".Implement a function that checks whether an integer is a prime number.Find all prime numbers that are less than my_integer and store as prime_result.Print out the length of prime_result.
Assign an integer "100" to a variable named "my_integer".Implement a function that checks whether an integer is a prime number.Find all prime numbers that are less than my_integer and store as prime_result.Print out the length of prime_result.
Assign an integer "17" to a variable named "my_integer".Implement a function that checks whether an integer is a prime number.Find all prime numbers that are less than my_integer and store as prime_result.Print out the length of prime_result.
Assign an array "[1, 2, 3, 4, 5]" to a variable named "my_array".Assign a positive integer "3" to a variable named "k".Implement a function that rotates one array to the right by 1 step.Rotate my_array k steps and store as rotated_result.Print out rotated_result.
Assign an array "[-1, 30, 50, 3]" to a variable named "my_array".Assign a positive integer "2" to a variable named "k".Implement a function that rotates one array to the right by 1 step.Rotate my_array k steps and store as rotated_result.Print out rotated_result.
Assign an array "[2, 3, 5, -30]" to a variable named "my_array".Assign a positive integer "1" to a variable named "k".Implement a function that rotates one array to the right by 1 step.Rotate my_array k steps and store as rotated_result.Print out rotated_result.
Assign an array "[1, 2, 0, 4]" to a variable named "my_array".Assign a positive integer "0" to a variable named "k".Implement a function that rotates one array to the right by 1 step.Rotate my_array k steps and store as rotated_result.Print out rotated_result.
Assign an array "[2, 3, 4]" to a variable named "my_array".Assign a positive integer "8" to a variable named "k".Implement a function that rotates one array to the right by 1 step.Rotate my_array k steps and store as rotated_result.Print out rotated_result.
Assign an array "[1, 2, 3, 4, 5]" to a variable named "my_array".Compute the sum of my_array and store as my_sum.Implement a function that checks whether one subset of an array "[1, 2, 3, 4, 5]" is equal to my_sum/2.Print out the function output when the above array is my_array.
Assign an array "[1, 5, 11, 5]" to a variable named "my_array".Compute the sum of my_array and store as my_sum.Implement a function that checks whether one subset of an array "[1, 5, 11, 5]" is equal to my_sum/2.Print out the function output when the above array is my_array.
Assign an array "[1, 2, 3, 5]" to a variable named "my_array".Compute the sum of my_array and store as my_sum.Implement a function that checks whether one subset of an array "[1, 2, 3, 5]" is equal to my_sum/2.Print out the function output when the above array is my_array.
Assign an array "[1, 2, 0, 4]" to a variable named "my_array".Compute the sum of my_array and store as my_sum.Implement a function that checks whether one subset of an array "[1, 2, 0, 4]" is equal to my_sum/2.Print out the function output when the above array is my_array.
Assign an array "[2, 3, 4, 3]" to a variable named "my_array".Compute the sum of my_array and store as my_sum.Implement a function that checks whether one subset of an array "[2, 3, 4, 3]" is equal to my_sum/2.Print out the function output when the above array is my_array.
Assign a non-negative integer "2" to a variable named "my_number".Compute the square root of my_number and store as root_number.Implement a function that only returns the integer part of a float number.Print out the integer part of root_number.
Assign a non-negative integer "5" to a variable named "my_number".Compute the square root of my_number and store as root_number.Implement a function that only returns the integer part of a float number.Print out the integer part of root_number.
Assign a non-negative integer "101" to a variable named "my_number".Compute the square root of my_number and store as root_number.Implement a function that only returns the integer part of a float number.Print out the integer part of root_number.
Assign a non-negative integer "8" to a variable named "my_number".Compute the square root of my_number and store as root_number.Implement a function that only returns the integer part of a float number.Print out the integer part of root_number.
Assign a non-negative integer "226" to a variable named "my_number".Compute the square root of my_number and store as root_number.Implement a function that only returns the integer part of a float number.Print out the integer part of root_number.
Assign a non-negative integer "2" to a variable named "my_number".Plus my_number by 1 and store as plus_number.Implement a function that only returns the digits of an integer as a list.Print out the digits of plus_number.
Assign a non-negative integer "5" to a variable named "my_number".Plus my_number by 1 and store as plus_number.Implement a function that only returns the digits of an integer as a list.Print out the digits of plus_number.
Assign a non-negative integer "101" to a variable named "my_number".Plus my_number by 1 and store as plus_number.Implement a function that only returns the digits of an integer as a list.Print out the digits of plus_number.
Assign a non-negative integer "2345" to a variable named "my_number".Plus my_number by 1 and store as plus_number.Implement a function that only returns the digits of an integer as a list.Print out the digits of plus_number.
Assign a non-negative integer "229" to a variable named "my_number".Plus my_number by 1 and store as plus_number.Implement a function that only returns the digits of an integer as a list.Print out the digits of plus_number.
Assign a non-negative integer "2" to a variable named "my_number".Implement a function that computes the square sum of two integers.Implement a function that checks one number is the sum of two square numbers.Print out "True" if my_number is the sum of two square numbers. Otherwise, print "False".
Assign a non-negative integer "5" to a variable named "my_number".Implement a function that computes the square sum of two integers.Implement a function that checks one number is the sum of two square numbers.Print out "True" if my_number is the sum of two square numbers. Otherwise, print "False".
Assign a non-negative integer "101" to a variable named "my_number".Implement a function that computes the square sum of two integers.Implement a function that checks one number is the sum of two square numbers.Print out "True" if my_number is the sum of two square numbers. Otherwise, print "False".
Assign a non-negative integer "3" to a variable named "my_number".Implement a function that computes the square sum of two integers.Implement a function that checks one number is the sum of two square numbers.Print out "True" if my_number is the sum of two square numbers. Otherwise, print "False".
Assign a non-negative integer "7" to a variable named "my_number".Implement a function that computes the square sum of two integers.Implement a function that checks one number is the sum of two square numbers.Print out "True" if my_number is the sum of two square numbers. Otherwise, print "False".
Assign an array "[14, 8, 11, 10]" to a variable named "my_array".Implement a function that computes standard deviation of an array.Calculate the standard deviation of my_array and store as result.Print out "True" if result is less than 1. Otherwise, print "False".
Assign an array "[3, 3, 3, 4]" to a variable named "my_array".Implement a function that computes standard deviation of an array.Calculate the standard deviation of my_array and store as result.Print out "True" if result is less than 1. Otherwise, print "False".
Assign an array "[1, 1, 1, 1, 1, 101]" to a variable named "my_array".Implement a function that computes standard deviation of an array.Calculate the standard deviation of my_array and store as result.Print out "True" if result is less than 1. Otherwise, print "False".
Assign an array "[1, 2, 3, 4, 5, 6, 7]" to a variable named "my_array".Implement a function that computes standard deviation of an array.Calculate the standard deviation of my_array and store as result.Print out "True" if result is less than 1. Otherwise, print "False".
Assign an array "[1, 0, 1, 0]" to a variable named "my_array".Implement a function that computes standard deviation of an array.Calculate the standard deviation of my_array and store as result.Print out "True" if result is less than 1. Otherwise, print "False".
Assign the matrix "[[3, 2], [2, 3]]" to a variable named "my_matrix".Calculate the number of rows of my_matrix and store as row_number.Calculate the number of columns of my_matrix and store as column_number.Calculate the sum of row_number and column_number and print the result.
Assign the matrix "[[3, 2, 5], [2, 3, 5]]" to a variable named "my_matrix".Calculate the number of rows of my_matrix and store as row_number.Calculate the number of columns of my_matrix and store as column_number.Calculate the sum of row_number and column_number and print the result.
Assign the matrix "[[1]]" to a variable named "my_matrix".Calculate the number of rows of my_matrix and store as row_number.Calculate the number of columns of my_matrix and store as column_number.Calculate the sum of row_number and column_number and print the result.
Assign the matrix "[[30000, 30000, 1], [30000, 30000, 1], [30000, 30000, 1]]" to a variable named "my_matrix".Calculate the number of rows of my_matrix and store as row_number.Calculate the number of columns of my_matrix and store as column_number.Calculate the sum of row_number and column_number and print the result.
Assign the matrix "[[5, 5, 5, 5, 5, 0]]" to a variable named "my_matrix".Calculate the number of rows of my_matrix and store as row_number.Calculate the number of columns of my_matrix and store as column_number.Calculate the sum of row_number and column_number and print the result.
Assign the array "[3, 2, 2, 3]" to a variable named "my_array".Calculate the mean of my_array and store as mean_number.Calculate the median of my_array and store as median_number.Calculate the difference between mean_number and median_number and print the result.
Assign the array "[3, 2, 5, 2, 3, 5]" to a variable named "my_array".Calculate the mean of my_array and store as mean_number.Calculate the median of my_array and store as median_number.Calculate the difference between mean_number and median_number and print the result.
Assign the array "[1]" to a variable named "my_array".Calculate the mean of my_array and store as mean_number.Calculate the median of my_array and store as median_number.Calculate the difference between mean_number and median_number and print the result.
Assign the array "[30000, 30000, 1, 30000, 30000, 1, 30000, 30000, 1]" to a variable named "my_array".Calculate the mean of my_array and store as mean_number.Calculate the median of my_array and store as median_number.Calculate the difference between mean_number and median_number and print the result.
Assign the array "[5, 5, 5, 5, 5, 0]" to a variable named "my_array".Calculate the mean of my_array and store as mean_number.Calculate the median of my_array and store as median_number.Calculate the difference between mean_number and median_number and print the result.
